"use strict";(self.webpackChunkseata_website=self.webpackChunkseata_website||[]).push([[24142],{80140:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var r=t(74848),s=t(28453);const a={title:"\u4e00\u6587\u5165\u95e8 Seata \u7f51\u7edc\u901a\u4fe1\u6e90\u7801",keywords:["Seata","RPC","\u6e90\u7801","\u5206\u5e03\u5f0f\u4e8b\u52a1"],description:"\u4e00\u7bc7\u8f83\u4e3a\u5168\u9762\u7684\u5165\u95e8\u7ea7 Seata RPC \u6e90\u7801\u5256\u6790",author:"\u4f55\u9526",date:new Date("2024-12-18T00:00:00.000Z")},o=void 0,i={permalink:"/zh-cn/blog/seata-rpc-analysis",editUrl:"https://github.com/apache/incubator-seata-website/blob/docusaurus/i18n/zh-cn/docusaurus-plugin-content-blog/seata-rpc-analysis.md",source:"@site/i18n/zh-cn/docusaurus-plugin-content-blog/seata-rpc-analysis.md",title:"\u4e00\u6587\u5165\u95e8 Seata \u7f51\u7edc\u901a\u4fe1\u6e90\u7801",description:"\u4e00\u7bc7\u8f83\u4e3a\u5168\u9762\u7684\u5165\u95e8\u7ea7 Seata RPC \u6e90\u7801\u5256\u6790",date:"2024-12-18T00:00:00.000Z",formattedDate:"2024\u5e7412\u670818\u65e5",tags:[],readingTime:54.365,hasTruncateMarker:!1,authors:[{name:"\u4f55\u9526"}],frontMatter:{title:"\u4e00\u6587\u5165\u95e8 Seata \u7f51\u7edc\u901a\u4fe1\u6e90\u7801",keywords:["Seata","RPC","\u6e90\u7801","\u5206\u5e03\u5f0f\u4e8b\u52a1"],description:"\u4e00\u7bc7\u8f83\u4e3a\u5168\u9762\u7684\u5165\u95e8\u7ea7 Seata RPC \u6e90\u7801\u5256\u6790",author:"\u4f55\u9526",date:"2024-12-18T00:00:00.000Z"},unlisted:!1,nextItem:{title:"Go\u8bed\u8a00\u5ba2\u6237\u7aef\u4e0eSeata Server\u901a\u4fe1",permalink:"/zh-cn/blog/seata-grpc-client"}},l={authorsImageUrls:[void 0]},c=[{value:"\u6574\u4f53\u7c7b\u5c42\u6b21\u7ed3\u6784",id:"\u6574\u4f53\u7c7b\u5c42\u6b21\u7ed3\u6784",level:2},{value:"\u5982\u4f55\u542f\u52a8 Server \u548c Client",id:"\u5982\u4f55\u542f\u52a8-server-\u548c-client",level:2},{value:"Server \u662f\u600e\u4e48\u542f\u52a8\u7684",id:"server-\u662f\u600e\u4e48\u542f\u52a8\u7684",level:3},{value:"\u6ce8\u518c\u5904\u7406\u5668",id:"\u6ce8\u518c\u5904\u7406\u5668",level:4},{value:"\u521d\u59cb\u5316\u5b9a\u65f6\u7ebf\u7a0b\u6c60",id:"\u521d\u59cb\u5316\u5b9a\u65f6\u7ebf\u7a0b\u6c60",level:4},{value:"\u542f\u52a8 ServerBootStrap",id:"\u542f\u52a8-serverbootstrap",level:4},{value:"Client \u662f\u600e\u4e48\u542f\u52a8\u7684",id:"client-\u662f\u600e\u4e48\u542f\u52a8\u7684",level:3},{value:"TM \u7684\u521d\u59cb\u5316",id:"tm-\u7684\u521d\u59cb\u5316",level:4},{value:"RM \u7684\u521d\u59cb\u5316",id:"rm-\u7684\u521d\u59cb\u5316",level:4},{value:"\u5982\u4f55\u53d1\u9001\u548c\u5904\u7406\u62a5\u6587",id:"\u5982\u4f55\u53d1\u9001\u548c\u5904\u7406\u62a5\u6587",level:2},{value:"\u540c\u6b65\u548c\u5f02\u6b65",id:"\u540c\u6b65\u548c\u5f02\u6b65",level:3},{value:"\u5f02\u6b65\u8c03\u7528",id:"\u5f02\u6b65\u8c03\u7528",level:3},{value:"\u540c\u6b65\u8c03\u7528",id:"\u540c\u6b65\u8c03\u7528",level:3},{value:"\u62a5\u6587\u5904\u7406",id:"\u62a5\u6587\u5904\u7406",level:3},{value:"\u6279\u91cf\u53d1\u9001",id:"\u6279\u91cf\u53d1\u9001",level:3},{value:"Seata \u5982\u4f55\u7ba1\u7406 Channel",id:"seata-\u5982\u4f55\u7ba1\u7406-channel",level:2},{value:"Client Channel",id:"client-channel",level:3},{value:"\u5bf9\u8c61\u6c60\u7684\u6838\u5fc3\u7c7b",id:"\u5bf9\u8c61\u6c60\u7684\u6838\u5fc3\u7c7b",level:4},{value:"\u5982\u4f55\u6c60\u5316 Channel",id:"\u5982\u4f55\u6c60\u5316-channel",level:4},{value:"\u83b7\u53d6 Channel",id:"\u83b7\u53d6-channel",level:4},{value:"Server Channel",id:"server-channel",level:3},{value:"\u5904\u7406 Client \u6ce8\u518c",id:"\u5904\u7406-client-\u6ce8\u518c",level:4},{value:"\u83b7\u53d6 Channel",id:"\u83b7\u53d6-channel-1",level:4},{value:"\u4e00\u56fe\u603b\u7ed3",id:"\u4e00\u56fe\u603b\u7ed3",level:3},{value:"Seata \u5982\u4f55\u8bbe\u8ba1\u534f\u8bae",id:"seata-\u5982\u4f55\u8bbe\u8ba1\u534f\u8bae",level:2},{value:"V1 \u7248\u672c\u534f\u8bae",id:"v1-\u7248\u672c\u534f\u8bae",level:3},{value:"\u5982\u4f55\u8fdb\u884c\u7f16\u89e3\u7801",id:"\u5982\u4f55\u8fdb\u884c\u7f16\u89e3\u7801",level:3},{value:"\u603b\u7ed3",id:"\u603b\u7ed3",level:2}];function p(e){const n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"\u5728\u524d\u51e0\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u4eec\u8be6\u7ec6\u804a\u4e86\u804a Seata \u7684 XA\u3001AT \u4ee5\u53ca TCC \u6a21\u5f0f\uff0c\u5b83\u4eec\u90fd\u662f\u5728 Seata \u5b9a\u4e49\u7684\u5168\u5c40\u6846\u67b6\u4e0b\u7684\u4e0d\u540c\u7684\u4e8b\u52a1\u6a21\u5f0f\u3002"}),"\n",(0,r.jsx)(n.p,{children:"\u6211\u4eec\u77e5\u9053\uff0c\u5728 Seata \u4e2d\uff0c\u6709\u4e09\u7c7b\u89d2\u8272\uff0cTC\u3001RM\u3001TM\uff0cSeata Server \u4f5c\u4e3a TC \u534f\u8c03\u5206\u652f\u4e8b\u52a1\u7684\u63d0\u4ea4\u548c\u56de\u6eda\uff0c\u5404\u4e2a\u8d44\u6e90\u4f5c\u4e3a RM \u548c TM\uff0c\u90a3\u4e48\u8fd9\u4e09\u8005\u4e4b\u95f4\u662f\u5982\u4f55\u901a\u4fe1\u7684\uff1f"}),"\n",(0,r.jsx)(n.p,{children:"\u6240\u4ee5\uff0c\u8fd9\u7bc7\u6587\u7ae0\u5c31\u6765\u770b\u770b Seata \u5e95\u5c42\u662f\u5982\u4f55\u8fdb\u884c\u7f51\u7edc\u901a\u4fe1\u7684\u3002"}),"\n",(0,r.jsx)(n.h2,{id:"\u6574\u4f53\u7c7b\u5c42\u6b21\u7ed3\u6784",children:"\u6574\u4f53\u7c7b\u5c42\u6b21\u7ed3\u6784"}),"\n",(0,r.jsx)(n.p,{children:"\u6211\u4eec\u5148\u7740\u773c\u5927\u5c40\uff0c\u770b\u4e00\u770b Seata \u6574\u4e2a RPC \u7684\u7c7b\u5c42\u6b21\u7ed3\u6784\u3002"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"image-20241217222005964",src:t(98021).A+"",width:"1948",height:"1016"})}),"\n",(0,r.jsx)(n.p,{children:"\u4ece\u7c7b\u7ed3\u6784\u5c42\u6b21\u53ef\u4ee5\u770b\u51fa\u6765\uff0cAbstractNettyRemoting \u662f\u6574\u4e2a Seata \u7f51\u7edc\u901a\u4fe1\u7684\u4e00\u4e2a\u9876\u5c42\u62bd\u8c61\u7c7b\u3002"}),"\n",(0,r.jsx)(n.p,{children:"\u5728\u8fd9\u4e2a\u7c7b\u4e2d\u4e3b\u8981\u5b9e\u73b0\u4e86\u4e00\u4e9b RPC \u7684\u57fa\u7840\u901a\u7528\u65b9\u6cd5\uff0c\u6bd4\u5982\u540c\u6b65\u8c03\u7528 sendSync\u3001\u5f02\u6b65\u8c03\u7528 sendAsync \u7b49\u3002"}),"\n",(0,r.jsx)(n.p,{children:"\u4e8b\u5b9e\u4e0a\uff0c\u5c31\u7f51\u7edc\u8c03\u7528\u6765\u8bf4\uff0c\u65e0\u975e\u5c31\u662f\u540c\u6b65\u8c03\u7528\u548c\u5f02\u6b65\u8c03\u7528\uff0c\u50cf\u5176\u4ed6\u7684\u4ec0\u4e48\u8bf7\u6c42\u548c\u54cd\u5e94\u90fd\u53ea\u662f\u62a5\u6587\u5185\u5bb9\u7684\u533a\u5206\u3002"}),"\n",(0,r.jsx)(n.p,{children:"\u6240\u4ee5\uff0c\u5728 Seata \u4e2d\uff0c\u6211\u4e2a\u4eba\u8ba4\u4e3a\u8fd8\u5dee\u4e00\u4e2a\u9876\u5c42\u7684\u63a5\u53e3 Remoting\uff0c\u7c7b\u4f3c\u4e8e\u4e0b\u9762\u8fd9\u6837\u7684\uff1a"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"import io.netty.channel.Channel;\nimport java.util.concurrent.TimeoutException;\n\npublic interface Remoting<Req, Resp> {\n\n    /**\n     * \u540c\u6b65\u8c03\u7528\n     */ \n    Resp sendSync(Channel channel, Req request, long timeout) throws TimeoutException;\n\n    /** \n     * \u5f02\u6b65\u8c03\u7528\n     */ \n    void sendAsync(Channel channel, Req request);\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"\u5728 AbstractNettyRemoting \u5b9e\u73b0\u4e86\u901a\u7528\u7684\u7f51\u7edc\u8c03\u7528\u65b9\u6cd5\uff0c\u4f46\u662f\u4e0d\u540c\u89d2\u8272\u5728\u8fd9\u65b9\u9762\u8fd8\u662f\u6709\u4e00\u4e9b\u533a\u5206\u7684\uff0c\u6bd4\u5982\u5bf9\u4e8e Server \u6765\u8bf4\uff0c\u5b83\u7684\u8bf7\u6c42\u8c03\u7528\u9700\u8981\u77e5\u9053\u5411\u54ea\u4e2a\u5ba2\u6237\u7aef\u53d1\u9001\uff0c\u800c\u5bf9\u4e8e TM\u3001RM \u6765\u8bf4\uff0c\u5b83\u4eec\u53d1\u9001\u8bf7\u6c42\u76f4\u63a5\u53d1\u5c31\u884c\uff0c\u4e0d\u9700\u8981\u6307\u5b9a\u67d0\u4e2a\u7279\u5b9a\u7684 TC \u670d\u52a1\uff0c\u53ea\u9700\u8981\u5728\u5b9e\u73b0\u7c7b\u901a\u8fc7\u8d1f\u8f7d\u5747\u8861\u7b97\u6cd5\u627e\u5230\u5408\u9002\u7684 Server \u8282\u70b9\u5c31\u884c\u3002"}),"\n",(0,r.jsx)(n.p,{children:"\u6240\u4ee5\u5c31\u533a\u5206\u51fa\u4e86 RemotingServer \u548c RemotingClient\uff0c\u4f46\u662f\u5e95\u5c42\u8fd8\u662f\u8981\u4f9d\u8d56 AbstractNettyRemoting \u8fdb\u884c\u7f51\u7edc\u8c03\u7528\u7684\uff0c\u6240\u4ee5\u5b83\u4eec\u5404\u81ea\u6709\u5b50\u7c7b\u5b9e\u73b0\u4e86 AbstractNettyRemoting\u3002"}),"\n",(0,r.jsx)(n.p,{children:"\u53ef\u4ee5\u8bf4 Seata \u7684\u8fd9\u79cd\u8bbe\u8ba1\u5728\u6211\u770b\u6765\u662f\u975e\u5e38\u4e0d\u9519\u7684\uff0c\u5bf9\u4e8e\u8fd9\u79cd CS \u67b6\u6784\u7684\u8fdc\u7a0b\u901a\u4fe1\uff0c\u53ef\u4ee5\u7b97\u4e00\u79cd\u901a\u7528\u7684\u8bbe\u8ba1\u65b9\u6848\u3002"}),"\n",(0,r.jsx)(n.h2,{id:"\u5982\u4f55\u542f\u52a8-server-\u548c-client",children:"\u5982\u4f55\u542f\u52a8 Server \u548c Client"}),"\n",(0,r.jsx)(n.p,{children:"\u804a\u5b8c\u4e86 Seata \u5e95\u5c42\u7684\u7c7b\u5c42\u6b21\uff0c\u6211\u4eec\u518d\u5206\u522b\u4ee5 Server \u548c Client \u7684\u89c6\u89d2\u6765\u770b\u5b83\u4eec\u662f\u5982\u4f55\u542f\u52a8\u7684\uff0c\u4ee5\u53ca\u5728\u542f\u52a8\u7684\u65f6\u5019\u9700\u8981\u505a\u4e9b\u4ec0\u4e48\u4e8b\u60c5\u3002"}),"\n",(0,r.jsx)(n.h3,{id:"server-\u662f\u600e\u4e48\u542f\u52a8\u7684",children:"Server \u662f\u600e\u4e48\u542f\u52a8\u7684"}),"\n",(0,r.jsx)(n.p,{children:"Seata Server \u4f5c\u4e3a\u4e00\u4e2a\u72ec\u7acb\u7684 SpringBoot \u9879\u76ee\uff0c\u8981\u600e\u4e48\u6837\u624d\u80fd\u5728 SpringBoot \u542f\u52a8\u7684\u65f6\u5019\u81ea\u52a8\u505a\u70b9\u4e8b\u5462\uff1f"}),"\n",(0,r.jsx)(n.p,{children:"Seata \u7684\u505a\u6cd5\u662f\u5b9e\u73b0\u4e86 CommandLineRunner \u63a5\u53e3\uff0c\u81f3\u4e8e\u8fd9\u91cc\u9762\u7684\u539f\u7406\u5c31\u4e0d\u662f\u672c\u7bc7\u6587\u7ae0\u8ba8\u8bba\u7684\u5185\u5bb9\u4e86\u3002"}),"\n",(0,r.jsx)(n.p,{children:"\u6211\u4eec\u4e3b\u8981\u5173\u6ce8\u5b83\u7684 run \u65b9\u6cd5\uff1a"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// org.apache.seata.server.ServerRunner#run\npublic void run(String... args) {\n    try {\n        long start = System.currentTimeMillis();\n        seataServer.start(args);\n        started = true;\n        long cost = System.currentTimeMillis() - start;\n        LOGGER.info("\\r\\n you can visit seata console UI on http://127.0.0.1:{}. \\r\\n log path: {}.", this.port, this.logPath);\n        LOGGER.info("seata server started in {} millSeconds", cost);\n    } catch (Throwable e) {\n        started = Boolean.FALSE;\n        LOGGER.error("seata server start error: {} ", e.getMessage(), e);\n        System.exit(-1);\n    }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"\u8fd9\u5176\u4e2d\u6838\u5fc3\u7684\u903b\u8f91\u5c31\u5728 seataServer.start() \u65b9\u6cd5\u4e2d\uff1a"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// org.apache.seata.server.Server#start\npublic void start(String[] args) {\n    // \u53c2\u6570\u89e3\u6790\u5668\uff0c\u7528\u4e8e\u89e3\u6790 sh \u7684\u542f\u52a8\u53c2\u6570\n    ParameterParser parameterParser = new ParameterParser(args);\n    // initialize the metrics\n    MetricsManager.get().init();\n    ThreadPoolExecutor workingThreads = new ThreadPoolExecutor(NettyServerConfig.getMinServerPoolSize(),\n            NettyServerConfig.getMaxServerPoolSize(), NettyServerConfig.getKeepAliveTime(), TimeUnit.SECONDS,\n            new LinkedBlockingQueue<>(NettyServerConfig.getMaxTaskQueueSize()),\n            new NamedThreadFactory("ServerHandlerThread", NettyServerConfig.getMaxServerPoolSize()), new ThreadPoolExecutor.CallerRunsPolicy());\n    // 127.0.0.1 and 0.0.0.0 are not valid here.\n    if (NetUtil.isValidIp(parameterParser.getHost(), false)) {\n        XID.setIpAddress(parameterParser.getHost());\n    } else {\n        String preferredNetworks = ConfigurationFactory.getInstance().getConfig(REGISTRY_PREFERED_NETWORKS);\n        if (StringUtils.isNotBlank(preferredNetworks)) {\n            XID.setIpAddress(NetUtil.getLocalIp(preferredNetworks.split(REGEX_SPLIT_CHAR)));\n        } else {\n            XID.setIpAddress(NetUtil.getLocalIp());\n        }\n    }\n    /**\n     * \u4e3b\u8981\u505a\u8fd9\u4e48\u51e0\u4ef6\u4e8b\uff1a\n     * 1. \u8bbe\u7f6e workingThreads \u4e3a AbstractNettyRemoting \u7684 messageExecutor \u5904\u7406\u5668\n     * 2. \u521b\u5efa ServerBootstrap\uff0c\u914d\u7f6e Boss \u548c Worker\uff0c\u5e76\u4e14\u8bbe\u7f6e Seata Server \u9700\u8981\u76d1\u542c\u7684\u7aef\u53e3\n     * 3. \u8bbe\u7f6e\u51fa\u6808\u3001\u5165\u6808\u5904\u7406\u5668 ServerHandler\uff0c\u5b83\u662f\u4e00\u4e2a ChannelDuplexHandler \u590d\u5408\u7684\u5904\u7406\u5668\n     */\n    NettyRemotingServer nettyRemotingServer = new NettyRemotingServer(workingThreads);\n    XID.setPort(nettyRemotingServer.getListenPort());\n    UUIDGenerator.init(parameterParser.getServerNode());\n    ConfigurableListableBeanFactory beanFactory = ((GenericWebApplicationContext) ObjectHolder.INSTANCE.getObject(OBJECT_KEY_SPRING_APPLICATION_CONTEXT)).getBeanFactory();\n    DefaultCoordinator coordinator = DefaultCoordinator.getInstance(nettyRemotingServer);\n    if (coordinator instanceof ApplicationListener) {\n        beanFactory.registerSingleton(NettyRemotingServer.class.getName(), nettyRemotingServer);\n        beanFactory.registerSingleton(DefaultCoordinator.class.getName(), coordinator);\n        ((GenericWebApplicationContext) ObjectHolder.INSTANCE.getObject(OBJECT_KEY_SPRING_APPLICATION_CONTEXT)).addApplicationListener((ApplicationListener<?>) coordinator);\n    }\n    // log store mode: file, db, redis\n    SessionHolder.init();\n    LockerManagerFactory.init();\n    // \u521d\u59cb\u5316\u4e00\u7cfb\u5217\u5b9a\u65f6\u7ebf\u7a0b\u6c60\uff0c\u7528\u4e8e\u91cd\u8bd5\u4e8b\u52a1\u63d0\u4ea4/\u56de\u6eda\u7b49\n    coordinator.init();\n    // \u8bbe\u7f6e\u4e8b\u52a1\u5904\u7406 Handler \u4e3a DefaultCoordinator\n    nettyRemotingServer.setHandler(coordinator);\n    serverInstance.serverInstanceInit();\n    // let ServerRunner do destroy instead ShutdownHook, see https://github.com/seata/seata/issues/4028\n    ServerRunner.addDisposable(coordinator);\n    // Server \u521d\u59cb\u5316\n    nettyRemotingServer.init();\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"\u6700\u540e\u7684 nettyRemotingServer.init() \u662f\u6574\u4e2a Seata Server \u542f\u52a8\u7684\u91cd\u8981\u903b\u8f91\uff0c\u4e3b\u8981\u505a\u4e86\u8fd9\u4e48\u51e0\u4ef6\u4e8b\uff1a"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"\u6ce8\u518c\u4e00\u7cfb\u5217\u5904\u7406\u5668"}),"\n",(0,r.jsx)(n.li,{children:"\u521d\u59cb\u5316\u4e00\u4e2a\u5b9a\u65f6\u7ebf\u7a0b\u6c60\uff0c\u7528\u4e8e\u6e05\u7406\u8fc7\u671f\u7684 MessageFuture"}),"\n",(0,r.jsx)(n.li,{children:"\u542f\u52a8 ServerBootStrap \u5e76\u5c06 TC \u670d\u52a1\u6ce8\u518c\u5230\u6ce8\u518c\u4e2d\u5fc3\uff0c\u6bd4\u5982 Nacos"}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"\u6ce8\u518c\u5904\u7406\u5668",children:"\u6ce8\u518c\u5904\u7406\u5668"}),"\n",(0,r.jsx)(n.p,{children:"\u5728 Seata \u5185\u90e8\uff0c\u7528\u4e00\u4e2a Pair \u5bf9\u8c61\u5173\u8054\u4e86\u5904\u7406\u5668\u548c\u7ebf\u7a0b\u6c60\uff0c\u5982\u4e0b\uff1a"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"package org.apache.seata.core.rpc.processor;\n\npublic final class Pair<T1, T2> {\n\n    private final T1 first;\n    private final T2 second;\n\n    public Pair(T1 first, T2 second) {\n        this.first = first;\n        this.second = second;\n    }\n\n    public T1 getFirst() {\n        return first;\n    }\n\n    public T2 getSecond() {\n        return second;\n    }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"\u800c\u6ce8\u518c\u5904\u7406\u5668\u672c\u8d28\u5c31\u662f\u5c06\u62a5\u6587\u7c7b\u578b\u3001\u5904\u7406\u8be5\u62a5\u6587\u7684\u5904\u7406\u5668\u4ee5\u53ca\u5177\u4f53\u6267\u884c\u7684\u7ebf\u7a0b\u6c60\u5173\u8054\u8d77\u6765\uff0c\u5b58\u5230\u4e00\u5f20\u54c8\u5e0c\u8868\u4e2d\u3002"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"// AbstractNettyRemotingServer\nprotected final Map<Integer/*MessageType*/, Pair<RemotingProcessor, ExecutorService>> processorTable = new HashMap<>(32);\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"// org.apache.seata.core.rpc.netty.NettyRemotingServer#registerProcessor\nprivate void registerProcessor() {\n    // 1. registry on request message processor\n    ServerOnRequestProcessor onRequestProcessor = new ServerOnRequestProcessor(this, getHandler());\n    ShutdownHook.getInstance().addDisposable(onRequestProcessor);\n    super.registerProcessor(MessageType.TYPE_BRANCH_REGISTER, onRequestProcessor, messageExecutor);\n    super.registerProcessor(MessageType.TYPE_BRANCH_STATUS_REPORT, onRequestProcessor, messageExecutor);\n    super.registerProcessor(MessageType.TYPE_GLOBAL_BEGIN, onRequestProcessor, messageExecutor);\n    super.registerProcessor(MessageType.TYPE_GLOBAL_COMMIT, onRequestProcessor, messageExecutor);\n    super.registerProcessor(MessageType.TYPE_GLOBAL_LOCK_QUERY, onRequestProcessor, messageExecutor);\n    super.registerProcessor(MessageType.TYPE_GLOBAL_REPORT, onRequestProcessor, messageExecutor);\n    super.registerProcessor(MessageType.TYPE_GLOBAL_ROLLBACK, onRequestProcessor, messageExecutor);\n    super.registerProcessor(MessageType.TYPE_GLOBAL_STATUS, onRequestProcessor, messageExecutor);\n    super.registerProcessor(MessageType.TYPE_SEATA_MERGE, onRequestProcessor, messageExecutor);\n    // 2. registry on response message processor\n    ServerOnResponseProcessor onResponseProcessor = new ServerOnResponseProcessor(getHandler(), getFutures());\n    super.registerProcessor(MessageType.TYPE_BRANCH_COMMIT_RESULT, onResponseProcessor, branchResultMessageExecutor);\n    super.registerProcessor(MessageType.TYPE_BRANCH_ROLLBACK_RESULT, onResponseProcessor, branchResultMessageExecutor);\n    // 3. registry rm message processor\n    RegRmProcessor regRmProcessor = new RegRmProcessor(this);\n    super.registerProcessor(MessageType.TYPE_REG_RM, regRmProcessor, messageExecutor);\n    // 4. registry tm message processor\n    RegTmProcessor regTmProcessor = new RegTmProcessor(this);\n    super.registerProcessor(MessageType.TYPE_REG_CLT, regTmProcessor, null);\n    // 5. registry heartbeat message processor\n    ServerHeartbeatProcessor heartbeatMessageProcessor = new ServerHeartbeatProcessor(this);\n    super.registerProcessor(MessageType.TYPE_HEARTBEAT_MSG, heartbeatMessageProcessor, null);\n}\n\n\n// org.apache.seata.core.rpc.netty.AbstractNettyRemotingServer#registerProcessor\npublic void registerProcessor(int messageType, RemotingProcessor processor, ExecutorService executor) {\n    Pair<RemotingProcessor, ExecutorService> pair = new Pair<>(processor, executor);\n    this.processorTable.put(messageType, pair);\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"\u4f60\u53ef\u80fd\u4f1a\u6ce8\u610f\u5230\uff0c\u5728\u6ce8\u518c\u5904\u7406\u5668\u65f6\uff0c\u6709\u4e00\u4e9b\u6ce8\u518c\u65f6\u4f20\u5165\u7684\u7ebf\u7a0b\u6c60\u662f null\uff0c\u90a3\u4e48\u5bf9\u5e94\u7684\u62a5\u6587\u4f1a\u7531\u54ea\u4e2a\u7ebf\u7a0b\u6267\u884c\u5462\uff1f"}),"\n",(0,r.jsx)(n.p,{children:"\u540e\u9762\u6211\u4eec\u4f1a\u63d0\u5230\u3002"}),"\n",(0,r.jsx)(n.h4,{id:"\u521d\u59cb\u5316\u5b9a\u65f6\u7ebf\u7a0b\u6c60",children:"\u521d\u59cb\u5316\u5b9a\u65f6\u7ebf\u7a0b\u6c60"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// org.apache.seata.core.rpc.netty.AbstractNettyRemoting#init\npublic void init() {\n    timerExecutor.scheduleAtFixedRate(() -> {\n        for (Map.Entry<Integer, MessageFuture> entry : futures.entrySet()) {\n            MessageFuture future = entry.getValue();\n            if (future.isTimeout()) {\n                futures.remove(entry.getKey());\n                RpcMessage rpcMessage = future.getRequestMessage();\n                future.setResultMessage(new TimeoutException(String.format("msgId: %s, msgType: %s, msg: %s, request timeout",\n                        rpcMessage.getId(), String.valueOf(rpcMessage.getMessageType()), rpcMessage.getBody().toString())));\n                if (LOGGER.isDebugEnabled()) {\n                    LOGGER.debug("timeout clear future: {}", entry.getValue().getRequestMessage().getBody());\n                }\n            }\n        }\n        nowMills = System.currentTimeMillis();\n    }, TIMEOUT_CHECK_INTERVAL, TIMEOUT_CHECK_INTERVAL, TimeUnit.MILLISECONDS);\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"\u8fd9\u4e2a\u6ca1\u5565\u597d\u8bf4\u7684\uff0c\u5c31\u662f\u521d\u59cb\u5316\u4e86\u4e00\u4e2a\u5b9a\u65f6\u7ebf\u7a0b\u6c60\u5b9a\u65f6\u6e05\u7406\u90a3\u4e9b\u8d85\u65f6\u7684 MessageFuture\uff0c\u8fd9\u91cc MessageFuture \u662f Seata \u5c06\u5f02\u6b65\u8c03\u7528\u8f6c\u4e3a\u540c\u6b65\u8c03\u7528\u7684\u5173\u952e\uff0c\u6211\u4eec\u540e\u9762\u4e5f\u4f1a\u8be6\u7ec6\u8bf4\u5230\u3002"}),"\n",(0,r.jsx)(n.h4,{id:"\u542f\u52a8-serverbootstrap",children:"\u542f\u52a8 ServerBootStrap"}),"\n",(0,r.jsx)(n.p,{children:"\u6700\u540e\u542f\u52a8 ServerBootStrap\uff0c\u8fd9\u5dee\u4e0d\u591a\u5c31\u662f Netty \u7684\u5185\u5bb9\u4e86\u3002"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// org.apache.seata.core.rpc.netty.NettyServerBootstrap#start\npublic void start() {\n    int port = getListenPort();\n    this.serverBootstrap.group(this.eventLoopGroupBoss, this.eventLoopGroupWorker)\n            .channel(NettyServerConfig.SERVER_CHANNEL_CLAZZ)\n            .option(ChannelOption.SO_BACKLOG, nettyServerConfig.getSoBackLogSize())\n            .option(ChannelOption.SO_REUSEADDR, true)\n            .childOption(ChannelOption.SO_KEEPALIVE, true)\n            .childOption(ChannelOption.TCP_NODELAY, true)\n            .childOption(ChannelOption.SO_SNDBUF, nettyServerConfig.getServerSocketSendBufSize())\n            .childOption(ChannelOption.SO_RCVBUF, nettyServerConfig.getServerSocketResvBufSize())\n            .childOption(ChannelOption.WRITE_BUFFER_WATER_MARK, new WriteBufferWaterMark(nettyServerConfig.getWriteBufferLowWaterMark(), nettyServerConfig.getWriteBufferHighWaterMark()))\n            .localAddress(new InetSocketAddress(port))\n            .childHandler(new ChannelInitializer<SocketChannel>() {\n                @Override\n                public void initChannel(SocketChannel ch) {\n                    // \u591a\u7248\u672c\u534f\u8bae\u89e3\u7801\u5668\n                    MultiProtocolDecoder multiProtocolDecoder = new MultiProtocolDecoder(channelHandlers);\n                    ch.pipeline()\n                            .addLast(new IdleStateHandler(nettyServerConfig.getChannelMaxReadIdleSeconds(), 0, 0))\n                            .addLast(multiProtocolDecoder);\n                }\n            });\n    try {\n        this.serverBootstrap.bind(port).sync();\n        LOGGER.info("Server started, service listen port: {}", getListenPort());\n        InetSocketAddress address = new InetSocketAddress(XID.getIpAddress(), XID.getPort());\n        for (RegistryService<?> registryService : MultiRegistryFactory.getInstances()) {\n            // \u6ce8\u518c\u670d\u52a1\n            registryService.register(address);\n        }\n        initialized.set(true);\n    } catch (SocketException se) {\n        throw new RuntimeException("Server start failed, the listen port: " + getListenPort(), se);\n    } catch (Exception exx) {\n        throw new RuntimeException("Server start failed", exx);\n    }\n}\n\n'})}),"\n",(0,r.jsx)(n.p,{children:"ServerBootstrap \u542f\u52a8\u65f6\u7684 childOption \u5c5e\u4e8e\u7f51\u7edc\u90e8\u5206\u7684\u5185\u5bb9\uff0c\u6211\u4eec\u4e0d\u8fc7\u591a\u89e3\u91ca\u3002"}),"\n",(0,r.jsx)(n.p,{children:"\u8fd9\u91cc\u4f60\u53ef\u80fd\u6709\u4e00\u70b9\u7591\u95ee\uff0c\u5728 pipeline \u4e2d\u4ec5\u4ec5\u53ea\u662f\u6dfb\u52a0\u4e86\u4e00\u4e2a MultiProtocolDecoder \u89e3\u7801\u5668\uff0c\u90a3\u4e1a\u52a1\u5904\u7406\u5668\u5462\uff1f"}),"\n",(0,r.jsx)(n.p,{children:"\u4e8b\u5b9e\u4e0a\uff0cMultiProtocolDecoder \u7684\u6784\u9020\u53c2\u6570\u4e2d\u7684 channelHandlers \u5c31\u662f ServerHandler\uff0c\u5b83\u662f\u5728\u521b\u5efa NettyRemotingServer \u65f6\u5c31\u88ab\u8bbe\u7f6e\u7684\u3002"}),"\n",(0,r.jsx)(n.p,{children:"\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u8981\u8fd9\u6837\u505a\uff0c\u5176\u5b9e\u662f\u548c Seata \u7684\u591a\u7248\u672c\u534f\u8bae\u76f8\u5173\u3002"}),"\n",(0,r.jsx)(n.p,{children:"\u5f53 Seata Server \u542f\u52a8\u540e\u7b2c\u4e00\u6b21\u8fdb\u884c\u89e3\u7801\u65f6\uff0c\u4f1a\u5c06 MultiProtocolDecoder \u4ece pipeline \u4e2d\u79fb\u9664\uff0c\u6839\u636e\u7248\u672c\u9009\u62e9\u5177\u4f53\u7684 Encoder \u548c Decoder \u5e76\u6dfb\u52a0\u5230 pipeline \u4e2d\uff0c\u6b64\u65f6\uff0c\u4e5f\u4f1a\u5c06 ServerHandler \u6dfb\u52a0\u5230 pipeline\u3002"}),"\n",(0,r.jsx)(n.h3,{id:"client-\u662f\u600e\u4e48\u542f\u52a8\u7684",children:"Client \u662f\u600e\u4e48\u542f\u52a8\u7684"}),"\n",(0,r.jsx)(n.p,{children:"\u5bf9\u4e8e Client \u6765\u8bf4\uff0c\u7531\u4e8e\u6211\u4eec\u4e00\u822c\u662f\u5728 SpringBoot \u4e2d\u4f7f\u7528 Seata\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5173\u6ce8\u7684\u70b9\u5728  SeataAutoConfiguration \u7c7b\u4e2d\u3002"}),"\n",(0,r.jsx)(n.p,{children:"\u5728\u8fd9\u4e2a\u7c7b\u91cc\u9762\u521b\u5efa\u4e86\u4e00\u4e2a GlobalTransactionScanner \u5bf9\u8c61\uff0c\u6211\u4eec\u6ce8\u610f\u5230\u5b83\u5b9e\u73b0\u4e86 InitializingBean\uff0c\u6240\u4ee5\u5c06\u76ee\u5149\u8f6c\u79fb\u5230 afterPropertiesSet \u65b9\u6cd5\u4e0a\u3002"}),"\n",(0,r.jsx)(n.p,{children:"\u679c\u7136\u5728\u8fd9\u4e2a\u65b9\u6cd5\u91cc\u9762\u8fdb\u884c\u4e86 TM \u548c RM \u7684\u521d\u59cb\u5316\u3002"}),"\n",(0,r.jsx)(n.h4,{id:"tm-\u7684\u521d\u59cb\u5316",children:"TM \u7684\u521d\u59cb\u5316"}),"\n",(0,r.jsx)(n.p,{children:"\u5bf9\u4e8e TM \u6765\u8bf4\uff0c\u521d\u59cb\u5316\u7684\u903b\u8f91\u5982\u4e0b\uff1a"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static void init(String applicationId, String transactionServiceGroup, String accessKey, String secretKey) {\n    /**\n     * \u4e3b\u8981\u505a\u8fd9\u4e48\u51e0\u4ef6\u4e8b\n     * 1. \u521b\u5efa\u7ebf\u7a0b\u6c60\u4f5c\u4e3a AbstractNettyRemotingClient \u7684 messageExecutor\n     * 2. \u8bbe\u7f6e\u4e8b\u52a1\u89d2\u8272 transactionRole \u4e3a TM_ROLE\n     * 3. \u521b\u5efa Bootstrap \u5e76\u8bbe\u7f6e\u51fa\u6808\u3001\u5165\u6808\u5904\u7406\u5668 ClientHandler\n     * 4. \u521b\u5efa\u5ba2\u6237\u7aef Channel \u7ba1\u7406\u5668 NettyClientChannelManager\n     */\n    TmNettyRemotingClient tmNettyRemotingClient = TmNettyRemotingClient.getInstance(applicationId, transactionServiceGroup, accessKey, secretKey);\n\n    /**\n     * \u4e3b\u8981\u505a\u8fd9\u4e48\u51e0\u4ef6\u4e8b\uff1a\n     * 1. \u6ce8\u518c\u4e00\u7cfb\u5217\u5904\u7406\u5668\n     * 2. \u521b\u5efa\u5b9a\u65f6\u7ebf\u7a0b\u6c60\u5b9a\u65f6\u5bf9\u4e8b\u52a1\u7ec4\u5185\u7684 Server \u53d1\u8d77\u8fde\u63a5\uff0c\u5982\u679c\u8fde\u63a5\u65ad\u5f00\uff0c\u5219\u5c1d\u8bd5\u91cd\u65b0\u5efa\u7acb\u8fde\u63a5\n     * 3. \u5982\u679c\u5ba2\u6237\u7aef\u5141\u8bb8\u62a5\u6587\u6279\u91cf\u53d1\u9001\uff0c\u5219\u521b\u5efa mergeSendExecutorService \u7ebf\u7a0b\u6c60\uff0c\u5e76\u63d0\u4ea4 MergedSendRunnable \u4efb\u52a1\n     * 4. \u521d\u59cb\u5316\u4e00\u4e2a\u5b9a\u65f6\u7ebf\u7a0b\u6c60\u6e05\u7406\u8fc7\u671f\u7684 MessageFuture\n     * 5. \u542f\u52a8\u5ba2\u6237\u7aef Bootstrap\n     * 6. \u521d\u59cb\u5316\u8fde\u63a5 initConnection\n     */\n    tmNettyRemotingClient.init();\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"\u542f\u52a8\u5ba2\u6237\u7aef Bootstrap \u7684\u903b\u8f91\u5982\u4e0b\uff1a"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@Override\npublic void start() {\n    if (this.defaultEventExecutorGroup == null) {\n        this.defaultEventExecutorGroup = new DefaultEventExecutorGroup(nettyClientConfig.getClientWorkerThreads(),\n                new NamedThreadFactory(getThreadPrefix(nettyClientConfig.getClientWorkerThreadPrefix()), nettyClientConfig.getClientWorkerThreads()));\n    }\n    this.bootstrap.group(this.eventLoopGroupWorker)\n            .channel(nettyClientConfig.getClientChannelClazz())\n            .option(ChannelOption.TCP_NODELAY, true)\n            .option(ChannelOption.SO_KEEPALIVE, true)\n            .option(ChannelOption.CONNECT_TIMEOUT_MILLIS, nettyClientConfig.getConnectTimeoutMillis())\n            .option(ChannelOption.SO_SNDBUF, nettyClientConfig.getClientSocketSndBufSize())\n            .option(ChannelOption.SO_RCVBUF, nettyClientConfig.getClientSocketRcvBufSize());\n    if (nettyClientConfig.enableNative()) {\n        if (PlatformDependent.isOsx()) {\n            if (LOGGER.isInfoEnabled()) {\n                LOGGER.info("client run on macOS");\n            }\n        } else {\n            bootstrap.option(EpollChannelOption.EPOLL_MODE, EpollMode.EDGE_TRIGGERED)\n                    .option(EpollChannelOption.TCP_QUICKACK, true);\n        }\n    }\n    bootstrap.handler(new ChannelInitializer<SocketChannel>() {\n        @Override\n        public void initChannel(SocketChannel ch) {\n            ch.pipeline().addLast(new IdleStateHandler(nettyClientConfig.getChannelMaxReadIdleSeconds(),\n                            nettyClientConfig.getChannelMaxWriteIdleSeconds(),\n                            nettyClientConfig.getChannelMaxAllIdleSeconds()))\n                    .addLast(new ProtocolDecoderV1())\n                    .addLast(new ProtocolEncoderV1());\n            if (channelHandlers != null) {\n                addChannelPipelineLast(ch, channelHandlers);\n            }\n        }\n    });\n    if (initialized.compareAndSet(false, true) && LOGGER.isInfoEnabled()) {\n        LOGGER.info("NettyClientBootstrap has started");\n    }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"\u7531\u4e8e\u5ba2\u6237\u7aef\u7684\u534f\u8bae\u7248\u672c\u6839\u636e\u4e0d\u540c\u7684 Seata \u7248\u672c\u662f\u53ef\u4ee5\u786e\u5b9a\u7684\uff0c\u6240\u4ee5\u8fd9\u91cc\u76f4\u63a5\u6dfb\u52a0\u4e86 V1 \u7248\u672c\u7684\u7f16\u89e3\u7801\u5668\uff0c\u8fd9\u91cc channelHandlers \u5176\u5b9e\u5c31\u662f ClientHandler\uff0c\u5b83\u4e5f\u662f Netty \u4e2d\u7684\u4e00\u4e2a\u590d\u5408\u5904\u7406\u5668\u3002"}),"\n",(0,r.jsx)(n.h4,{id:"rm-\u7684\u521d\u59cb\u5316",children:"RM \u7684\u521d\u59cb\u5316"}),"\n",(0,r.jsx)(n.p,{children:"RM \u7684\u521d\u59cb\u5316\u5927\u81f4\u903b\u8f91\u548c TM \u662f\u7c7b\u4f3c\u7684\uff0c\u8fd9\u91cc\u5c31\u4e0d\u8fc7\u591a\u4ecb\u7ecd\u4e86\u3002"}),"\n",(0,r.jsx)(n.h2,{id:"\u5982\u4f55\u53d1\u9001\u548c\u5904\u7406\u62a5\u6587",children:"\u5982\u4f55\u53d1\u9001\u548c\u5904\u7406\u62a5\u6587"}),"\n",(0,r.jsx)(n.p,{children:"\u5398\u6e05\u4e86 Seata Server \u548c Client \u7684\u5927\u81f4\u542f\u52a8\u6d41\u7a0b\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u6df1\u5165\u7684\u770b\u4e00\u770b Seata \u662f\u5982\u4f55\u8fdb\u884c\u62a5\u6587\u53d1\u9001\u548c\u5904\u7406\u7684\u3002"}),"\n",(0,r.jsx)(n.p,{children:"\u524d\u9762\u6211\u4eec\u4e5f\u8bf4\u8fc7\u4e86\uff0c\u53d1\u9001\u8bf7\u6c42\u548c\u5904\u7406\u62a5\u6587\u7684\u6838\u5fc3\u903b\u8f91\u662f\u5728 AbstractNettyRemoting \u4e2d\uff0c\u63a5\u4e0b\u6765\u5c31\u770b\u4e00\u770b\u8fd9\u4e2a\u7c7b\u3002"}),"\n",(0,r.jsx)(n.h3,{id:"\u540c\u6b65\u548c\u5f02\u6b65",children:"\u540c\u6b65\u548c\u5f02\u6b65"}),"\n",(0,r.jsx)(n.p,{children:"\u5148\u7b80\u5355\u8bf4\u4e00\u8bf4\u4ec0\u4e48\u662f\u540c\u6b65\u548c\u5f02\u6b65\u3002"}),"\n",(0,r.jsx)(n.p,{children:"\u540c\u6b65 Synchronous \u548c\u5f02\u6b65 Asynchronous\uff0c\u672c\u8d28\u4e0a\u662f\u63cf\u8ff0\u4e86\u7a0b\u5e8f\u5728\u5904\u7406\u591a\u4e2a\u4e8b\u4ef6\u6216\u8005\u4efb\u52a1\u65f6\u7684\u4e0d\u540c\u884c\u4e3a\u6a21\u5f0f\u3002"}),"\n",(0,r.jsx)(n.p,{children:"\u540c\u6b65\u662f\u6307\u4e00\u4e2a\u8fc7\u7a0b\u5fc5\u987b\u7b49\u5f85\u53e6\u4e00\u4e2a\u8fc7\u7a0b\u5b8c\u6210\u4e4b\u540e\u624d\u80fd\u7ee7\u7eed\u8fdb\u884c\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5728\u540c\u6b65\u64cd\u4f5c\u4e2d\uff0c\u8c03\u7528\u65b9\u53d1\u51fa\u8bf7\u6c42\u540e\u4f1a\u4e00\u76f4\u963b\u585e\u7b49\u5f85\u76f4\u5230\u63a5\u6536\u5230\u54cd\u5e94\u7ed3\u679c\u3001\u6216\u8005\u8d85\u65f6\u624d\u4f1a\u7ee7\u7eed\u6267\u884c\u540e\u7eed\u4ee3\u7801\u3002"}),"\n",(0,r.jsx)(n.p,{children:"\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u5f02\u6b65\u5219\u5141\u8bb8\u8c03\u7528\u8005\u5728\u8bf7\u6c42\u540e\u4e0d\u5fc5\u7b49\u5f85\u54cd\u5e94\u5c31\u53ef\u4ee5\u5411\u4e0b\u6267\u884c\uff0c\u4f46\u5f53\u8bf7\u6c42\u5b8c\u6210\u65f6\uff0c\u4f1a\u4ee5\u67d0\u79cd\u65b9\u5f0f\u5c06\u54cd\u5e94\u901a\u77e5\u5230\u8c03\u7528\u8005\uff08\u5982\u901a\u8fc7\u56de\u8c03\u51fd\u6570\u3001Future\uff09\uff0c\u5f02\u6b65\u6a21\u578b\u53ef\u4ee5\u63d0\u9ad8\u5e76\u53d1\u6027\u548c\u6548\u7387\u3002"}),"\n",(0,r.jsx)(n.p,{children:"\u4ece\u53e6\u4e00\u4e2a\u89d2\u5ea6\u6765\u8bf4\uff0c\u540c\u6b65\u8c03\u7528\u9700\u8981\u53d1\u8d77\u8c03\u7528\u7684\u7ebf\u7a0b\u83b7\u53d6\u7ed3\u679c\uff0c\u800c\u5f02\u6b65\u8c03\u7528\u5219\u662f\u7531\u5f02\u6b65\u7ebf\u7a0b\u5c06\u7ed3\u679c\u653e\u5230\u67d0\u4e2a\u5730\u65b9\uff08Future\uff09\u6216\u8005\u662f\u5f02\u6b65\u7ebf\u7a0b\u53bb\u6267\u884c\u4e8b\u5148\u51c6\u5907\u597d\u7684\u8c03\u7528\u6210\u529f/\u5931\u8d25\u7684\u56de\u8c03\u65b9\u6cd5\uff08\u56de\u8c03\u51fd\u6570\uff09\u3002"}),"\n",(0,r.jsx)(n.p,{children:"\u4e0b\u9762\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u5c55\u793a\u4e86\u4e09\u79cd\u8c03\u7528\u65b9\u5f0f\uff0c\u540c\u6b65\u3001\u5f02\u6b65 Future\u3001\u5f02\u6b65 Callback\u3002"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'import lombok.Data;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.TimeUnit;\n\npublic class AsyncTest {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncTest.class);\n\n    public static void main(String[] args) throws InterruptedException, ExecutionException {\n        Result syncResponse = testSync();\n        LOGGER.info("\u540c\u6b65\u54cd\u5e94\u7ed3\u679c: {}", syncResponse.getString());\n        CompletableFuture<Result> result = testAsyncFuture();\n        testAsyncCallback();\n        LOGGER.info("\u4e3b\u7ebf\u7a0b\u7ee7\u7eed\u5411\u4e0b\u6267\u884c~~");\n        TimeUnit.SECONDS.sleep(1); // \u4fdd\u8bc1\u6240\u6709\u7ed3\u679c\u5904\u7406\u5b8c\u6bd5\n        LOGGER.info("\u4e3b\u7ebf\u7a0b\u4ece\u5f02\u6b65 Future \u4e2d\u83b7\u53d6\u7ed3\u679c: {}", result.get().getString());\n    }\n\n    public static void testAsyncCallback() {\n        new AsyncTask().execute(new AsyncCallback() {\n            @Override\n            public void onComplete(Result result) {\n                try {\n                    TimeUnit.MILLISECONDS.sleep(50); // \u6a21\u62df\u5f02\u6b65\u8017\u65f6\n                } catch (InterruptedException e) {\n                }\n                LOGGER.info("\u5f02\u6b65 Callback \u83b7\u53d6\u7ed3\u679c: {}", result.getString());\n            }\n        });\n    }\n\n    public static CompletableFuture<Result> testAsyncFuture() {\n        return CompletableFuture.supplyAsync(() -> {\n            try {\n                TimeUnit.MILLISECONDS.sleep(50); // \u6a21\u62df\u5f02\u6b65\u8017\u65f6\n            } catch (InterruptedException e) {\n            }\n            Result asyncResponse = getResult();\n            LOGGER.info("\u5f02\u6b65 Future \u83b7\u53d6\u7ed3\u679c: {}", asyncResponse.getString());\n            return asyncResponse;\n        });\n    }\n\n    public static Result testSync() {\n        return getResult();\n    }\n\n    @Data\n    static class Result {\n        private String string;\n    }\n\n    interface AsyncCallback {\n        void onComplete(Result result);\n    }\n\n    static class AsyncTask {\n        void execute(AsyncCallback callback) {\n            new Thread(() -> {\n                Result asyncRes = getResult();\n                callback.onComplete(asyncRes);\n            }).start();\n        }\n    }\n\n    private static Result getResult() {\n        Result result = new Result();\n        result.setString("\u7ed3\u679c");\n        return result;\n    }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"\u8f93\u51fa\uff1a"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"22:26:38.788 [main] INFO  org.hein.netty.AsyncTest - \u540c\u6b65\u54cd\u5e94\u7ed3\u679c: \u7ed3\u679c\n22:26:38.849 [main] INFO  org.hein.netty.AsyncTest - \u4e3b\u7ebf\u7a0b\u7ee7\u7eed\u5411\u4e0b\u6267\u884c~~\n22:26:38.911 [Thread-0] INFO  org.hein.netty.AsyncTest - \u5f02\u6b65 Callback \u83b7\u53d6\u7ed3\u679c: \u7ed3\u679c\n22:26:38.911 [ForkJoinPool.commonPool-worker-1] INFO  org.hein.netty.AsyncTest - \u5f02\u6b65 Future \u83b7\u53d6\u7ed3\u679c: \u7ed3\u679c\n22:26:39.857 [main] INFO  org.hein.netty.AsyncTest - \u4e3b\u7ebf\u7a0b\u4ece\u5f02\u6b65 Future \u4e2d\u83b7\u53d6\u7ed3\u679c: \u7ed3\u679c\n"})}),"\n",(0,r.jsx)(n.p,{children:"\u4ece\u7ed3\u679c\u4e2d\uff0c\u81f3\u5c11\u53ef\u4ee5\u770b\u51fa\u4e09\u70b9\uff0c"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u4e00\u662f\u5f02\u6b65 Future \u548c\u5f02\u6b65 Callback \u5e76\u4e0d\u4f1a\u963b\u585e\u4e3b\u7ebf\u7a0b\u5411\u4e0b\u6267\u884c\u3002"}),"\n",(0,r.jsx)(n.li,{children:"\u4e8c\u662f\u5f02\u6b65\u8c03\u7528\u65f6\u5904\u7406\u7ed3\u679c\u7684\u4e0d\u662f\u4e3b\u7ebf\u7a0b\u3002"}),"\n",(0,r.jsx)(n.li,{children:"\u6700\u540e\uff0cFuture \u548c Callback \u7684\u533a\u522b\u5728\u4e8e Future \u53ea\u662f\u7531\u5f02\u6b65\u7ebf\u7a0b\u5c06\u7ed3\u679c\u5b58\u50a8\u5728\u4e86\u4e00\u4e2a\u5730\u65b9\uff08CompletableFuture#result\uff09\uff0c\u4f46\u662f\u540e\u7eed\u83b7\u53d6\u7ed3\u679c\u8fd8\u662f\u9700\u8981\u4e3b\u7ebf\u7a0b\uff08\u6216\u8005\u5176\u4ed6\u7ebf\u7a0b\uff09\u8c03\u7528 get \u65b9\u6cd5\uff0c\u800c Callback \u7684\u8bdd\uff0c\u5176\u5b9e\u5c31\u76f8\u5f53\u4e8e\u9884\u5148\u8bbe\u5b9a\u4e86\u7ed3\u679c\u7684\u5904\u7406\u65b9\u5f0f\uff0c\u7531\u5f02\u6b65\u7ebf\u7a0b\u53bb\u6267\u884c\u5c31\u597d\u4e86\u3002"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"\u5f53\u7136\uff0cCompletableFuture \u4e5f\u662f\u53ef\u4ee5\u4f5c\u56de\u8c03\u7684\uff0c\u6bd4\u5982\u8c03\u7528 whenComplete \u65b9\u6cd5\u3002"}),"\n",(0,r.jsx)(n.h3,{id:"\u5f02\u6b65\u8c03\u7528",children:"\u5f02\u6b65\u8c03\u7528"}),"\n",(0,r.jsx)(n.p,{children:"Netty \u4f5c\u4e3a\u4e00\u4e2a\u9ad8\u6027\u80fd\u7684\u5f02\u6b65 IO \u6846\u67b6\uff0c\u5b83\u7684\u8bbe\u8ba1\u6838\u5fc3\u5c31\u662f\u5f02\u6b65\u7684\uff0c\u6240\u4ee5\u57fa\u4e8e Netty \u8fdb\u884c\u5f02\u6b65\u8c03\u7528\u662f\u6bd4\u8f83\u7b80\u5355\u7684\u3002"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'protected void sendAsync(Channel channel, RpcMessage rpcMessage) {\n    channelWritableCheck(channel, rpcMessage.getBody());\n    if (LOGGER.isDebugEnabled()) {\n        LOGGER.debug("write message: {}, channel: {}, active? {}, writable? {}, isopen? {}", rpcMessage.getBody(), channel, channel.isActive(), channel.isWritable(), channel.isOpen());\n    }\n    doBeforeRpcHooks(ChannelUtil.getAddressFromChannel(channel), rpcMessage);\n    channel.writeAndFlush(rpcMessage).addListener((ChannelFutureListener) future -> {\n        if (!future.isSuccess()) {\n            destroyChannel(future.channel());\n        }\n    });\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"\u53ea\u9700\u8981\u7b80\u5355\u8c03\u7528 channel \u7684 writeAndFlush \u65b9\u6cd5\u5373\u53ef\u5b9e\u73b0\u5f02\u6b65\u8c03\u7528\u3002"}),"\n",(0,r.jsx)(n.p,{children:"\u7279\u522b\u8981\u6ce8\u610f\u7684\u662f\uff0cwriteAndFlush \u65b9\u6cd5\u5728\u8c03\u7528\u7ebf\u7a0b\u662f EventLoop \u7ebf\u7a0b\u7684\u60c5\u51b5\u4e0b\u4f1a\u53d8\u6210\u540c\u6b65\u8c03\u7528\u3002"}),"\n",(0,r.jsx)(n.h3,{id:"\u540c\u6b65\u8c03\u7528",children:"\u540c\u6b65\u8c03\u7528"}),"\n",(0,r.jsx)(n.p,{children:"\u5728 Netty \u4e2d\u5b9e\u73b0\u5f02\u6b65\u8c03\u7528\u5f88\u7b80\u5355\uff0c\u8981\u5b9e\u73b0\u540c\u6b65\u8c03\u7528\u5c31\u9ebb\u70e6\u4e00\u70b9\uff0c\u9700\u8981\u5c06\u5f02\u6b65\u8c03\u7528\u8f6c\u6362\u4e3a\u540c\u6b65\u8c03\u7528\u3002"}),"\n",(0,r.jsx)(n.p,{children:"\u4ece\u672c\u8d28\u4e0a\u6765\u8bf4\uff0c\u5f02\u6b65\u8f6c\u540c\u6b65\u5c31\u662f\u8ba9\u8c03\u7528\u7ebf\u7a0b\u53d1\u8d77\u8c03\u7528\u540e\uff0c\u62ff\u5230\u54cd\u5e94\u524d\u8fdb\u5165\u963b\u585e\uff0c\u62ff\u5230\u54cd\u5e94\u540e\u518d\u5524\u9192\u5b83\uff0c\u5411\u4e0b\u6267\u884c\u3002"}),"\n",(0,r.jsx)(n.p,{children:"\u90a3\u4e48 Seata \u7684\u5904\u7406\u7684\u6838\u5fc3\u5c31\u662f MessageFuture \u7c7b\uff0c\u5982\u4e0b\uff1a"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'package org.apache.seata.core.protocol;\n\nimport org.apache.seata.common.exception.ShouldNeverHappenException;\n\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.TimeoutException;\n\npublic class MessageFuture {\n\n    private RpcMessage requestMessage;\n    private long timeout;\n    private final long start = System.currentTimeMillis();\n\n    private final transient CompletableFuture<Object> origin = new CompletableFuture<>();\n\n    public boolean isTimeout() {\n        return System.currentTimeMillis() - start > timeout;\n    }\n\n    public Object get(long timeout, TimeUnit unit) throws TimeoutException, InterruptedException {\n        Object result;\n        try {\n            result = origin.get(timeout, unit);\n            if (result instanceof TimeoutException) {\n                throw (TimeoutException) result;\n            }\n        } catch (ExecutionException e) {\n            throw new ShouldNeverHappenException("Should not get results in a multi-threaded environment", e);\n        } catch (TimeoutException e) {\n            throw new TimeoutException(String.format("%s, cost: %d ms", e.getMessage(), System.currentTimeMillis() - start));\n        }\n        if (result instanceof RuntimeException) {\n            throw (RuntimeException) result;\n        } else if (result instanceof Throwable) {\n            throw new RuntimeException((Throwable) result);\n        }\n        return result;\n    }\n\n    public void setResultMessage(Object obj) {\n        origin.complete(obj);\n    }\n\n    public RpcMessage getRequestMessage() { return requestMessage; }\n\n    public void setRequestMessage(RpcMessage requestMessage) { this.requestMessage = requestMessage;}\n\n    public long getTimeout() { return timeout; }\n\n    public void setTimeout(long timeout) { this.timeout = timeout;}\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"\u6709\u4e86\u8fd9\u4e2a\u7c7b\u4e4b\u540e\uff0c\u540c\u6b65\u8c03\u7528\u7684\u8fc7\u7a0b\u5982\u4e0b\uff0c\u6211\u4eec\u4ee5\u5ba2\u6237\u7aef\u8bf7\u6c42\u3001\u670d\u52a1\u7aef\u54cd\u5e94\u4e3a\u4f8b\uff1a"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u9996\u5148\u5ba2\u6237\u7aef\u5c06\u8bf7\u6c42\u6784\u5efa\u4e3a MessageFuture\uff0c\u7136\u540e\u5c06\u8bf7\u6c42 id \u548c\u8fd9\u4e2a MessageFuture \u5bf9\u8c61\u5b58\u50a8\u5230\u4e00\u4e2a\u54c8\u5e0c\u8868\u4e2d\u3002"}),"\n",(0,r.jsx)(n.li,{children:"\u63a5\u7740\u5ba2\u6237\u7aef\u8c03\u7528 channel.writeAndFlush \u53d1\u8d77\u5f02\u6b65\u8c03\u7528\uff0c\u662f\u7684\uff0c\u8fd9\u91cc\u8fd8\u662f\u5f02\u6b65\u3002"}),"\n",(0,r.jsx)(n.li,{children:"\u5f02\u6b65\u8f6c\u540c\u6b65\u7684\u6838\u5fc3\u5728\u4e8e\uff0c\u6b64\u65f6\u7ebf\u7a0b\u9700\u8981\u8c03\u7528 MessageFuture \u5bf9\u8c61\u7684 get \u65b9\u6cd5\u8fdb\u5165\u963b\u585e\uff0c\u5f53\u7136\u5b9e\u9645\u662f\u8c03\u7528\u4e86 CompletableFuture \u7684 get \u65b9\u6cd5\u8fdb\u5165\u540c\u6b65\u963b\u585e\u3002"}),"\n",(0,r.jsx)(n.li,{children:"\u5f53\u670d\u52a1\u7aef\u5904\u7406\u5b8c\u6bd5\uff0c\u5b83\u53c8\u4f1a\u53d1\u51fa\u8bf7\u6c42\uff08\u670d\u52a1\u7aef\u89c6\u89d2\uff09\uff0c\u5728\u5ba2\u6237\u7aef\u6765\u770b\uff0c\u8fd9\u5c31\u662f\u54cd\u5e94\u3002"}),"\n",(0,r.jsx)(n.li,{children:"\u5f53\u5ba2\u6237\u7aef\u6536\u5230\u54cd\u5e94\u4e4b\u540e\uff0c\u7531 EventLoop \u7ebf\u7a0b\u5c06\u54cd\u5e94\u7ed3\u679c\u8bbe\u7f6e\u5230 MessageFuture \u4e2d\uff0c\u7531\u4e8e\u4e00\u6b21\u8bf7\u6c42\u548c\u54cd\u5e94\u7684 id \u662f\u76f8\u540c\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u4ece\u4e0a\u9762\u7684\u54c8\u5e0c\u8868\u4e2d\u62ff\u5230\u5bf9\u5e94\u7684 MessageFuture \u5bf9\u8c61\u3002"}),"\n",(0,r.jsx)(n.li,{children:"\u5f53\u54cd\u5e94\u7ed3\u679c\u88ab\u8bbe\u7f6e\u4e4b\u540e\uff0c\u4e0a\u9762\u963b\u585e\u7684\u7ebf\u7a0b\u5c31\u53ef\u4ee5\u6062\u590d\u8fd0\u884c\uff0c\u8fd9\u6837\u5c31\u5b9e\u73b0\u4e86\u540c\u6b65\u7684\u6548\u679c\u3002"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"\u6240\u4ee5\uff0cSeata \u7684\u89e3\u51b3\u65b9\u6848\u672c\u8d28\u4e0a\u6765\u8bf4\u5c31\u662f\u5229\u7528\u4e86 CompletableFuture \u5bf9\u8c61\uff0c\u5c06\u5b83\u4f5c\u4e3a\u4e00\u4e2a\u5b58\u50a8\u7ed3\u679c\u7684\u5bb9\u5668\u3002"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'protected Object sendSync(Channel channel, RpcMessage rpcMessage, long timeoutMillis) throws TimeoutException {\n    if (timeoutMillis <= 0) {\n        throw new FrameworkException("timeout should more than 0ms");\n    }\n    if (channel == null) {\n        LOGGER.warn("sendSync nothing, caused by null channel.");\n        return null;\n    }\n    MessageFuture messageFuture = new MessageFuture();\n    messageFuture.setRequestMessage(rpcMessage);\n    messageFuture.setTimeout(timeoutMillis);\n    futures.put(rpcMessage.getId(), messageFuture); // \u8bf7\u6c42\u548c\u54cd\u5e94\u7684 id \u662f\u4e00\u6837\u7684\n    // \u68c0\u67e5\u8be5 Channel \u662f\u5426\u53ef\u5199\uff08Channel \u4e2d\u6709\u5199\u7f13\u51b2\u533a\uff0c\u5982\u679c\u7f13\u51b2\u533a\u8fbe\u5230\u9608\u503c\u6c34\u4f4d\uff0c\u5219\u4e0d\u53ef\u5199\uff09\n    channelWritableCheck(channel, rpcMessage.getBody());\n    // \u83b7\u53d6\u76ee\u7684 ip \u5730\u5740\n    String remoteAddr = ChannelUtil.getAddressFromChannel(channel);\n    // \u6267\u884c\u53d1\u9001\u524d\u94a9\u5b50\u65b9\u6cd5\n    doBeforeRpcHooks(remoteAddr, rpcMessage);\n    // \u53d1\u9001\u7ed3\u679c\uff0c\u5e76\u8bbe\u7f6e\u56de\u8c03\uff0c\u975e\u963b\u585e\n    channel.writeAndFlush(rpcMessage).addListener((ChannelFutureListener) future -> {\n        // \u53d1\u9001\u5931\u8d25\uff0c\u79fb\u9664 future\uff0c\u5173\u95ed Channel\n        if (!future.isSuccess()) {\n            MessageFuture mf = futures.remove(rpcMessage.getId());\n            if (mf != null) {\n                mf.setResultMessage(future.cause());\n            }\n            destroyChannel(future.channel());\n        }\n    });\n    try {\n        // Netty \u662f\u5f02\u6b65\u53d1\u9001\uff0c\u6240\u4ee5\u8fd9\u91cc\u9700\u8981\u7b49\u5f85\u7ed3\u679c\uff0c\u5c06\u5f02\u6b65\u8f6c\u4e3a\u540c\u6b65\n        Object result = messageFuture.get(timeoutMillis, TimeUnit.MILLISECONDS);\n        // \u6267\u884c\u53d1\u9001\u540e\u7684\u94a9\u5b50\u65b9\u6cd5\n        doAfterRpcHooks(remoteAddr, rpcMessage, result);\n        return result;\n    } catch (Exception exx) {\n        LOGGER.error("wait response error:{},ip:{},request:{}", exx.getMessage(), channel.remoteAddress(), rpcMessage.getBody());\n        // \u8d85\u65f6\u5f02\u5e38\n        if (exx instanceof TimeoutException) {\n            throw (TimeoutException) exx;\n        } else {\n            throw new RuntimeException(exx);\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"\u62a5\u6587\u5904\u7406",children:"\u62a5\u6587\u5904\u7406"}),"\n",(0,r.jsx)(n.p,{children:"\u5728 Netty \u4e2d\uff0c\u63d0\u5230\u62a5\u6587\u5904\u7406\uff0c\u6211\u4eec\u9996\u5148\u5e94\u8be5\u60f3\u5230\u7684\u5c31\u662f\u5165\u6808\u3001\u51fa\u6808\u5904\u7406\u5668\u3002"}),"\n",(0,r.jsx)(n.p,{children:"\u5728 Seata Server \u7aef\uff0c\u9664\u4e86\u5e38\u89c1\u7684\u7f16\u89e3\u7801\u5904\u7406\u5668\u4e4b\u5916\uff0c\u5c31\u662f ServerHandler \u5904\u7406\u5668\u4e86\uff0c\u5982\u4e0b\uff1a"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@ChannelHandler.Sharable\nclass ServerHandler extends ChannelDuplexHandler {\n\n    @Override\n    public void channelRead(final ChannelHandlerContext ctx, Object msg) throws Exception {\n        // \u524d\u7f6e\u4e86\u89e3\u7801\u5904\u7406\u5668\uff0c\u6240\u4ee5\u8fd9\u91cc\u7684\u6d88\u606f\u662f RpcMessage\n        if (msg instanceof RpcMessage) {\n            processMessage(ctx, (RpcMessage) msg);\n        } else {\n            LOGGER.error("rpcMessage type error");\n        }\n    }\n\n    // ...\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"\u6bd4\u8f83\u6709\u4e1a\u52a1\u542b\u4e49\u7684\u5c31\u662f\u8fd9\u4e2a channelRead \u65b9\u6cd5\uff0c\u6240\u6709\u53d1\u5411 Server \u7684\u62a5\u6587\u5728\u7ecf\u8fc7\u89e3\u7801\u4e4b\u540e\u90fd\u4f1a\u6765\u5230\u8fd9\u4e2a\u65b9\u6cd5\u3002"}),"\n",(0,r.jsx)(n.p,{children:"\u8fd9\u91cc\u7684 processMessage \u65b9\u6cd5\u5c31\u662f AbstractNettyRemoting \u4e2d\u7684\u4e1a\u52a1\u5904\u7406\u65b9\u6cd5\uff0c\u5982\u4e0b\uff1a"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'protected void processMessage(ChannelHandlerContext ctx, RpcMessage rpcMessage) throws Exception {\n    if (LOGGER.isDebugEnabled()) {\n        LOGGER.debug("{} msgId: {}, body: {}", this, rpcMessage.getId(), rpcMessage.getBody());\n    }\n    Object body = rpcMessage.getBody();\n    if (body instanceof MessageTypeAware) {\n        MessageTypeAware messageTypeAware = (MessageTypeAware) body;\n        // \u5728 Server \u542f\u52a8\u7684\u65f6\u5019\uff0c\u5411 processorTable \u6ce8\u518c\u4e86\u4e00\u5927\u5806\u5904\u7406\u5668\n        final Pair<RemotingProcessor, ExecutorService> pair = this.processorTable.get((int) messageTypeAware.getTypeCode());\n        if (pair != null) {\n            // \u62ff\u5230\u5bf9\u5e94\u7684\u7ebf\u7a0b\u6c60\u6267\u884c\n            if (pair.getSecond() != null) {\n                try {\n                    pair.getSecond().execute(() -> {\n                        try {\n                            // \u627e\u5bf9\u5e94\u7684\u5904\u7406\u5668\u6267\u884c\n                            pair.getFirst().process(ctx, rpcMessage);\n                        } catch (Throwable th) {\n                            LOGGER.error(FrameworkErrorCode.NetDispatch.getErrCode(), th.getMessage(), th);\n                        } finally {\n                            MDC.clear();\n                        }\n                    });\n                } catch (RejectedExecutionException e) {\n                    // \u7ebf\u7a0b\u6c60\u6ee1\u4e86\uff0c\u6267\u884c\u62d2\u7edd\u7b56\u7565\n                    LOGGER.error(FrameworkErrorCode.ThreadPoolFull.getErrCode(), "thread pool is full, current max pool size is " + messageExecutor.getActiveCount());\n                    if (allowDumpStack) {\n                        // \u5bfc\u51fa\u7ebf\u7a0b\u6808\u4fe1\u606f\n                        String name = ManagementFactory.getRuntimeMXBean().getName();\n                        String pid = name.split("@")[0];\n                        long idx = System.currentTimeMillis();\n                        try {\n                            String jstackFile = idx + ".log";\n                            LOGGER.info("jstack command will dump to {}", jstackFile);\n                            Runtime.getRuntime().exec(String.format("jstack %s > %s", pid, jstackFile));\n                        } catch (IOException exx) {\n                            LOGGER.error(exx.getMessage());\n                        }\n                        allowDumpStack = false;\n                    }\n                }\n            } else {\n                try {\n                    // \u5982\u679c\u6ca1\u6709\u4e3a\u5904\u7406\u5668\u914d\u7f6e\u7ebf\u7a0b\u6c60\uff0c\u5219\u7531\u5f53\u524d\u7ebf\u7a0b\u6267\u884c\uff0c\u57fa\u672c\u4e0a\u5c31\u662f EventLoop \u7ebf\u7a0b\u4e86\n                    pair.getFirst().process(ctx, rpcMessage);\n                } catch (Throwable th) {\n                    LOGGER.error(FrameworkErrorCode.NetDispatch.getErrCode(), th.getMessage(), th);\n                }\n            }\n        } else {\n            LOGGER.error("This message type [{}] has no processor.", messageTypeAware.getTypeCode());\n        }\n    } else {\n        LOGGER.error("This rpcMessage body[{}] is not MessageTypeAware type.", body);\n    }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"\u8fd9\u4e2a\u65b9\u6cd5\u7684\u903b\u8f91\u5f88\u7b80\u5355\u3002"}),"\n",(0,r.jsx)(n.p,{children:"Seata \u5728 Server \u542f\u52a8\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5411 processorTable \u6ce8\u518c\u4e86\u4e00\u5927\u5806\u5904\u7406\u5668\uff0c\u90a3\u4e48\u8fd9\u91cc\u5c31\u53ef\u4ee5\u6839\u636e\u6d88\u606f\u7c7b\u578b Code  \u62ff\u5230\u5bf9\u5e94\u7684\u5904\u7406\u5668\u548c\u7ebf\u7a0b\u6c60\u3002"}),"\n",(0,r.jsx)(n.p,{children:"\u5982\u679c\u6709\u7ebf\u7a0b\u6c60\uff0c\u5c31\u5728\u7ebf\u7a0b\u6c60\u5185\u6267\u884c\u5904\u7406\u5668\u7684\u65b9\u6cd5\uff0c\u5426\u5219\u5c31\u4ea4\u7ed9 EventLoop \u7ebf\u7a0b\u53bb\u6267\u884c\u3002"}),"\n",(0,r.jsx)(n.p,{children:"\u5f53\u7136\uff0c\u5bf9\u4e8e Client \u800c\u8a00\uff0c\u4e5f\u662f\u8fd9\u6837\u7684\u3002"}),"\n",(0,r.jsx)(n.h3,{id:"\u6279\u91cf\u53d1\u9001",children:"\u6279\u91cf\u53d1\u9001"}),"\n",(0,r.jsx)(n.p,{children:"\u5728\u7f51\u7edc\u7a0b\u5e8f\u4e2d\uff0c\u6709\u65f6\u5019\u4e5f\u9700\u8981\u5b9e\u73b0\u6279\u91cf\u53d1\u9001\uff0c\u6211\u4eec\u6765\u770b Seata \u662f\u600e\u4e48\u505a\u7684\uff0c\u8fd9\u91cc\u4e3b\u8981\u770b\u5ba2\u6237\u7aef\u5411\u670d\u52a1\u7aef\u53d1\u9001\u3002"}),"\n",(0,r.jsx)(n.p,{children:"\u8fd8\u8bb0\u5f97\u6211\u4eec\u4e0a\u9762\u5728 Client \u542f\u52a8\u7684\u8fc7\u7a0b\u4e2d\u63d0\u5230\u8fc7\u4e00\u4e2a\u7ebf\u7a0b\u6c60 mergeSendExecutorService\uff0c\u5982\u679c\u5141\u8bb8\u6279\u91cf\u53d1\u9001\uff0c\u90a3\u4e48\u5728 Client \u542f\u52a8\u7684\u65f6\u5019\u5c31\u4f1a\u63d0\u4ea4\u4e00\u4e2a MergedSendRunnable \u4efb\u52a1\uff0c\u6211\u4eec\u5148\u6765\u770b\u8fd9\u4e2a\u4efb\u52a1\u5728\u5e72\u5565\uff1f"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'private class MergedSendRunnable implements Runnable {\n\n    @Override\n    public void run() {\n        // \u6b7b\u5faa\u73af\n        while (true) {\n            synchronized (mergeLock) {\n                try {\n                    // \u4fdd\u8bc1\u7ebf\u7a0b\u6700\u591a\u53ea\u4f1a\u7a7a\u95f2 1ms\n                    mergeLock.wait(MAX_MERGE_SEND_MILLS); // 1\n                } catch (InterruptedException ignore) {\n                    // ignore\n                }\n            }\n            // \u6b63\u5728\u53d1\u9001\u4e2d\u7684\u6807\u8bc6\n            isSending = true;\n            // basketMap: key \u662f address\uff0cvalue \u662f\u53d1\u5411\u8be5 address \u7684\u62a5\u6587\u961f\u5217\uff08\u963b\u585e\u961f\u5217\uff09\n            basketMap.forEach((address, basket) -> {\n                if (basket.isEmpty()) {\n                    return;\n                }\n                MergedWarpMessage mergeMessage = new MergedWarpMessage();\n                while (!basket.isEmpty()) {\n                    // \u5c06\u540c\u4e00\u4e2a\u963b\u585e\u961f\u5217\u4e2d\u6240\u6709 RpcMessage \u8fdb\u884c\u5408\u5e76\n                    RpcMessage msg = basket.poll();\n                    mergeMessage.msgs.add((AbstractMessage) msg.getBody());\n                    mergeMessage.msgIds.add(msg.getId());\n                }\n                if (mergeMessage.msgIds.size() > 1) {\n                    printMergeMessageLog(mergeMessage);\n                }\n                Channel sendChannel = null;\n                try {\n                    // \u6279\u91cf\u53d1\u9001\u62a5\u6587\u662f\u4e00\u4e2a\u540c\u6b65\u8bf7\u6c42\uff0c\u4f46\u662f\u65e0\u9700\u83b7\u53d6\u8fd4\u56de\u503c\n                    // \u56e0\u4e3a messageFuture \u5728\u5c06\u62a5\u6587\u653e\u5165 basketMap \u4e4b\u524d\u5c31\u5df2\u7ecf\u88ab\u521b\u5efa\n                    // \u8fd4\u56de\u503c\u5c06\u5728 ClientOnResponseProcessor \u4e2d\u88ab\u8bbe\u7f6e\n                    sendChannel = clientChannelManager.acquireChannel(address);\n                    // \u5185\u90e8\u5c06 mergeMessage \u5c01\u88c5\u4e3a\u4e00\u4e2a\u666e\u901a\u7684 RpcMessage \u53d1\u9001\n                    AbstractNettyRemotingClient.this.sendAsyncRequest(sendChannel, mergeMessage);\n                } catch (FrameworkException e) {\n                    if (e.getErrorCode() == FrameworkErrorCode.ChannelIsNotWritable && sendChannel != null) {\n                        destroyChannel(address, sendChannel);\n                    }\n                    // fast fail\n                    for (Integer msgId : mergeMessage.msgIds) {\n                        MessageFuture messageFuture = futures.remove(msgId);\n                        if (messageFuture != null) {\n                            messageFuture.setResultMessage(new RuntimeException(String.format("%s is unreachable", address), e));\n                        }\n                    }\n                    LOGGER.error("client merge call failed: {}", e.getMessage(), e);\n                }\n            });\n            isSending = false;\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"\u90a3\u4e48\uff0c\u4e0e\u4e4b\u76f8\u5173\u7684\u6279\u91cf\u53d1\u9001\u4ee3\u7801\u5982\u4e0b\uff1a"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'public Object sendSyncRequest(Object msg) throws TimeoutException {\n    String serverAddress = loadBalance(getTransactionServiceGroup(), msg);\n    long timeoutMillis = this.getRpcRequestTimeout();\n    RpcMessage rpcMessage = buildRequestMessage(msg, ProtocolConstants.MSGTYPE_RESQUEST_SYNC);\n    // send batch message\n    // put message into basketMap, @see MergedSendRunnable\n    if (this.isEnableClientBatchSendRequest()) {\n        // \u5982\u679c\u5141\u8bb8\u5ba2\u6237\u7aef\u6279\u91cf\u6d88\u606f\u53d1\u9001\n        // send batch message is sync request, needs to create messageFuture and put it in futures.\n        MessageFuture messageFuture = new MessageFuture();\n        messageFuture.setRequestMessage(rpcMessage);\n        messageFuture.setTimeout(timeoutMillis);\n        futures.put(rpcMessage.getId(), messageFuture);\n\n        // put message into basketMap\n        // \u62ff\u5230 serverAddress \u5bf9\u5e94\u7684\u53d1\u9001\u961f\u5217\n        BlockingQueue<RpcMessage> basket = CollectionUtils.computeIfAbsent(basketMap, serverAddress,\n                key -> new LinkedBlockingQueue<>());\n        // \u5c06\u62a5\u6587\u6dfb\u52a0\u5230\u961f\u5217\u4e2d\uff0c\u7b49\u5f85 mergeSendExecutorService \u8fdb\u884c\u5b9e\u9645\u7684\u53d1\u9001\n        if (!basket.offer(rpcMessage)) {\n            LOGGER.error("put message into basketMap offer failed, serverAddress: {}, rpcMessage: {}", serverAddress, rpcMessage);\n            return null;\n        }\n        if (!isSending) {\n            // \u4fdd\u8bc1\u961f\u5217\u4e2d\u4e00\u6709\u6570\u636e\uff0c\u5c31\u5524\u9192\u7ebf\u7a0b\uff0c\u8fdb\u884c\u6279\u91cf\u53d1\u9001\n            synchronized (mergeLock) {\n                mergeLock.notifyAll();\n            }\n        }\n        try {\n            // \u7ebf\u7a0b\u963b\u585e\u7b49\u5f85\u54cd\u5e94\n            return messageFuture.get(timeoutMillis, TimeUnit.MILLISECONDS);\n        } catch (Exception exx) {\n            LOGGER.error("wait response error: {}, ip: {}, request: {}", exx.getMessage(), serverAddress, rpcMessage.getBody());\n            if (exx instanceof TimeoutException) {\n                throw (TimeoutException) exx;\n            } else {\n                throw new RuntimeException(exx);\n            }\n        }\n    } else {\n        // \u666e\u901a\u53d1\u9001\uff0c\u62ff\u5230 channel \u8c03\u7236\u7c7b\u7684\u540c\u6b65\u8c03\u7528\u65b9\u6cd5\u5373\u53ef\n        Channel channel = clientChannelManager.acquireChannel(serverAddress);\n        return super.sendSync(channel, rpcMessage, timeoutMillis);\n    }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"\u53ef\u4ee5\u770b\u5230\uff0c\u8fd9\u91cc\u9762\u4e5f\u7528\u5230\u4e86\u5bf9\u8c61\u9501\u7684\u540c\u6b65-\u7b49\u5f85\u673a\u5236\uff0c\u90a3\u4e48\u5b9e\u73b0\u7684\u6548\u679c\u5c31\u662f\uff1a"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"\u6700\u591a\u9694 1ms \u4f1a\u904d\u5386 basketMap \u8fdb\u884c\u62a5\u6587\u53d1\u9001\u3002"}),"\n",(0,r.jsx)(n.li,{children:"\u5728 mergeSendExecutorService \u5185\u90e8\u7684\u7ebf\u7a0b\u963b\u585e\u671f\u95f4\uff08mainLock.wait\uff09\uff0c\u5982\u679c\u6765\u4e86\u9700\u8981\u53d1\u9001\u7684\u62a5\u6587\uff0c\u90a3\u4e48\u4f1a\u5524\u9192 mainLock \u4e0a\u7684\u7ebf\u7a0b\uff0c\u7ee7\u7eed\u8fdb\u884c\u53d1\u9001\u3002"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"\u90a3 Server \u662f\u600e\u4e48\u5904\u7406\u7684\u5462\uff1f\u4e3b\u8981\u770b MergedWarpMessage \u62a5\u6587\u7684 TypeCode\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f TYPE_SEATA_MERGE\uff0c\u518d\u770b Server \u542f\u52a8\u7684\u65f6\u5019\u5bf9\u8fd9\u4e2a Code \u6ce8\u518c\u54ea\u4e2a\u5904\u7406\u5668\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f ServerOnRequestProcessor\u3002"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"\u8fd9\u91cc\u5176\u5b9e\u5c31\u5411\u4f60\u5c55\u793a\u4e86\uff0c\u5982\u4f55\u53bb\u627e\u67d0\u4e2a\u62a5\u6587\u662f\u600e\u4e48\u5904\u7406\u7684\uff0c\u6388\u4eba\u4ee5\u9c7c\u4e0d\u5982\u6388\u4eba\u4ee5\u6e14\uff01"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"\u5728 ServerOnRequestProcessor \u8fd9\u8fb9\uff0c\u5b9e\u9645\u4e0a\u5bf9\u5e94\u4e86\u4e24\u79cd\u5904\u7406 MergedWarpMessage \u62a5\u6587\u7684\u65b9\u5f0f\uff1a"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"MergedWarpMessage \u4e2d\u7684\u6240\u6709\u72ec\u7acb\u8bf7\u6c42\u5168\u90e8\u5904\u7406\u5b8c\u6bd5\u4e4b\u540e\uff0c\u7edf\u4e00\u53d1\u9001 MergeResultMessage\u3002"}),"\n",(0,r.jsx)(n.li,{children:"\u7531 batchResponseExecutorService \u7ebf\u7a0b\u6c60\u5904\u7406\u53d1\u9001\u4efb\u52a1\uff0c\u53ef\u4ee5\u4fdd\u8bc1\u4e24\u70b9\uff0c\u4e00\u662f\u5f53\u6709\u62a5\u6587\u7ed3\u679c\u5c31\u54cd\u5e94\uff0c\u5373\u4f7f\u7ebf\u7a0b wait\uff0c\u4e5f\u4f1a\u5c06\u5b83 notify\uff0c\u4e8c\u662f\u81f3\u5c11 1ms \u4f1a\u54cd\u5e94\u4e00\u6b21\uff0c\u56e0\u4e3a batchResponseExecutorService \u4e2d\u6267\u884c\u7684\u7ebf\u7a0b\u6700\u591a wait 1ms\u3002"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"\u6ce8\u610f\uff0c\u8fd9\u4e24\u79cd\u65b9\u5f0f\u54cd\u5e94\u7684\u62a5\u6587\u7c7b\u578b\u662f\u4e0d\u540c\u7684\uff0c\u7b2c\u4e00\u79cd\u54cd\u5e94\u7684\u662f MergeResultMessage\uff0c\u7b2c\u4e8c\u79cd\u662f BatchResultMessage\uff0c\u5728 Client \u4e5f\u4f1a\u6709\u4e0d\u540c\u7684\u5904\u7406\u3002"}),"\n",(0,r.jsx)(n.p,{children:"ServerOnRequestProcessor \u4e2d\u6838\u5fc3\u5904\u7406\u65b9\u6cd5\u5982\u4e0b\uff1a"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'private void onRequestMessage(ChannelHandlerContext ctx, RpcMessage rpcMessage) {\n    Object message = rpcMessage.getBody();\n    RpcContext rpcContext = ChannelManager.getContextFromIdentified(ctx.channel());\n    // the batch send request message\n    if (message instanceof MergedWarpMessage) {\n        final List<AbstractMessage> msgs = ((MergedWarpMessage) message).msgs;\n        final List<Integer> msgIds = ((MergedWarpMessage) message).msgIds;\n        //  \u5141\u8bb8 TC \u670d\u52a1\u7aef\u6279\u91cf\u8fd4\u56de\u7ed3\u679c && \u5ba2\u6237\u7aef\u7248\u672c\u53f7 >= 1.5.0\n        if (NettyServerConfig.isEnableTcServerBatchSendResponse() && StringUtils.isNotBlank(rpcContext.getVersion())\n                && Version.isAboveOrEqualVersion150(rpcContext.getVersion())) {\n            // \u7531 batchResponseExecutorService \u5355\u72ec\u5904\u7406\uff0c\u65e0\u9700\u7b49\u5230\u6279\u91cf\u8bf7\u6c42\u5168\u90e8\u5904\u7406\u5b8c\u6bd5\n            for (int i = 0; i < msgs.size(); i++) {\n                if (PARALLEL_REQUEST_HANDLE) {\n                    int finalI = i;\n                    CompletableFuture.runAsync(\n                            () -> handleRequestsByMergedWarpMessageBy150(msgs.get(finalI), msgIds.get(finalI), rpcMessage, ctx, rpcContext));\n                } else {\n                    handleRequestsByMergedWarpMessageBy150(msgs.get(i), msgIds.get(i), rpcMessage, ctx, rpcContext);\n                }\n            }\n        } else {\n            // \u6bcf\u4e2a\u8bf7\u6c42\u90fd\u5904\u7406\u5b8c\u6bd5\uff0c\u624d\u80fd\u5411\u5ba2\u6237\u7aef\u53d1\u51fa\u54cd\u5e94\n            List<AbstractResultMessage> results = new ArrayList<>();\n            List<CompletableFuture<AbstractResultMessage>> futures = new ArrayList<>();\n            for (int i = 0; i < msgs.size(); i++) {\n                if (PARALLEL_REQUEST_HANDLE) {\n                    int finalI = i;\n                    futures.add(CompletableFuture.supplyAsync(() -> handleRequestsByMergedWarpMessage(msgs.get(finalI), rpcContext)));\n                } else {\n                    results.add(i, handleRequestsByMergedWarpMessage(msgs.get(i), rpcContext));\n                }\n            }\n            if (CollectionUtils.isNotEmpty(futures)) {\n                try {\n                    for (CompletableFuture<AbstractResultMessage> future : futures) {\n                        results.add(future.get()); // \u963b\u585e\u7b49\u5f85\u5904\u7406\u7ed3\u679c\n                    }\n                } catch (InterruptedException | ExecutionException e) {\n                    LOGGER.error("handle request error: {}", e.getMessage(), e);\n                }\n            }\n            MergeResultMessage resultMessage = new MergeResultMessage();\n            resultMessage.setMsgs(results.toArray(new AbstractResultMessage[0]));\n            remotingServer.sendAsyncResponse(rpcMessage, ctx.channel(), resultMessage);\n        }\n    } else {\n        // \u5904\u7406\u5355\u4e2a\u62a5\u6587\u54cd\u5e94\n    }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"\u800c handleRequestsByMergedWarpMessage \u548c handleRequestsByMergedWarpMessageBy150 \u7684\u533a\u522b\u5c31\u5728\u4e8e\u540e\u8005\u4f1a\u5c06\u7ed3\u679c\u5c01\u88c5\u4e3a QueueItem \u52a0\u5165\u5230\u963b\u585e\u961f\u5217\u7531 batchResponseExecutorService \u4e2d\u7684\u7ebf\u7a0b\u8fdb\u884c\u5b9e\u9645\u7684\u53d1\u9001\uff0c\u800c\u524d\u8005\u4ec5\u4ec5\u662f\u8fd4\u56de\u5904\u7406\u7684\u7ed3\u679c\u3002"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'private AbstractResultMessage handleRequestsByMergedWarpMessage(AbstractMessage subMessage, RpcContext rpcContext) {\n    AbstractResultMessage resultMessage = transactionMessageHandler.onRequest(subMessage, rpcContext);\n    return resultMessage;\n}\n\nprivate void handleRequestsByMergedWarpMessageBy150(AbstractMessage msg, int msgId, RpcMessage rpcMessage,\n                                                    ChannelHandlerContext ctx, RpcContext rpcContext) {\n    AbstractResultMessage resultMessage = transactionMessageHandler.onRequest(msg, rpcContext);\n    // \u62ff\u5230 channel \u5bf9\u5e94\u7684\u53d1\u9001\u961f\u5217\n    BlockingQueue<QueueItem> msgQueue = CollectionUtils.computeIfAbsent(basketMap, ctx.channel(), key -> new LinkedBlockingQueue<>());\n    // \u5c06\u7ed3\u679c\u6dfb\u52a0\u5230\u961f\u5217\u4e2d\uff0c\u7b49\u5f85 batchResponseExecutorService \u7ebf\u7a0b\u6c60\u5b9e\u9645\u8fdb\u884c\u53d1\u9001\n    if (!msgQueue.offer(new QueueItem(resultMessage, msgId, rpcMessage))) {\n        LOGGER.error("put message into basketMap offer failed, channel: {}, rpcMessage: {}, resultMessage: {}", ctx.channel(), rpcMessage, resultMessage);\n    }\n    if (!isResponding) {\n        // \u4fdd\u8bc1\u961f\u5217\u4e2d\u4e00\u6709\u6570\u636e\uff0c\u5c31\u5524\u9192\u7ebf\u7a0b\uff0c\u8fdb\u884c\u6279\u91cf\u53d1\u9001\n        synchronized (batchResponseLock) {\n            batchResponseLock.notifyAll();\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"\u518d\u6765\u770b batchResponseExecutorService \u7ebf\u7a0b\u6c60\u662f\u600e\u4e48\u5904\u7406\u6279\u91cf\u53d1\u9001\u7684\u4efb\u52a1\u7684\uff1f"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'private class BatchResponseRunnable implements Runnable {\n    @Override\n    public void run() {\n        while (true) {\n            synchronized (batchResponseLock) {\n                try {\n                    // \u6700\u591a\u7a7a\u95f2 1ms\n                    batchResponseLock.wait(MAX_BATCH_RESPONSE_MILLS);\n                } catch (InterruptedException e) {\n                    LOGGER.error("BatchResponseRunnable Interrupted error", e);\n                }\n            }\n            isResponding = true;\n            // \u904d\u5386 basketMap \u5904\u7406\n            basketMap.forEach((channel, msgQueue) -> {\n                if (msgQueue.isEmpty()) {\n                    return;\n                }\n                // Because the [serialization,compressor,rpcMessageId,headMap] of the response\n                // needs to be the same as the [serialization,compressor,rpcMessageId,headMap] of the request.\n                // Assemble by grouping according to the [serialization,compressor,rpcMessageId,headMap] dimensions.\n                // \u5c06\u961f\u5217\u4e2d\u7684\u54cd\u5e94\u5c01\u88c5\u4e3a BatchResultMessage\uff0c\u4f46\u662f\u6ce8\u610f\u5e76\u4e0d\u662f\u5c06\u6240\u6709\u7684\u54cd\u5e94\u62a5\u6587\u4e00\u6b21\u53d1\u9001\u51fa\u53bb\n                // \u9700\u8981\u6309\u7167 [serialization,compressor,rpcMessageId,headMap] \u8fdb\u884c\u5206\u7ec4\uff0c\u7136\u540e\u6309\u7ec4\u8fdb\u884c\u5f02\u6b65\u53d1\u9001\n                Map<ClientRequestRpcInfo, BatchResultMessage> batchResultMessageMap = new HashMap<>();\n                while (!msgQueue.isEmpty()) {\n                    QueueItem item = msgQueue.poll();\n                    BatchResultMessage batchResultMessage = CollectionUtils.computeIfAbsent(batchResultMessageMap,\n                            new ClientRequestRpcInfo(item.getRpcMessage()),\n                            key -> new BatchResultMessage());\n                    batchResultMessage.getResultMessages().add(item.getResultMessage());\n                    batchResultMessage.getMsgIds().add(item.getMsgId());\n                }\n                batchResultMessageMap.forEach((clientRequestRpcInfo, batchResultMessage) ->\n                        remotingServer.sendAsyncResponse(buildRpcMessage(clientRequestRpcInfo), channel, batchResultMessage));\n            });\n            isResponding = false;\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"\u6700\u540e\u6211\u4eec\u6765\u770b Client \u8fd9\u8fb9\u662f\u600e\u4e48\u5904\u7406 Server \u7684\u6279\u91cf\u54cd\u5e94\u62a5\u6587\u7684\uff0c\u6839\u636e Client \u6ce8\u518c\u7684\u5904\u7406\u5668\uff0c\u5904\u7406\u6279\u91cf\u62a5\u6587\u7684\u5904\u7406\u5668\u662f ClientOnResponseProcessor\uff0c\u5982\u4e0b\uff1a"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'public void process(ChannelHandlerContext ctx, RpcMessage rpcMessage) throws Exception {\n    // \u5904\u7406 MergeResultMessage\n    if (rpcMessage.getBody() instanceof MergeResultMessage) {\n        MergeResultMessage results = (MergeResultMessage) rpcMessage.getBody();\n        MergedWarpMessage mergeMessage = (MergedWarpMessage) mergeMsgMap.remove(rpcMessage.getId());\n        for (int i = 0; i < mergeMessage.msgs.size(); i++) {\n            int msgId = mergeMessage.msgIds.get(i);\n            MessageFuture future = futures.remove(msgId);\n            if (future == null) {\n                LOGGER.error("msg: {} is not found in futures, result message: {}", msgId, results.getMsgs()[i]);\n            } else {\n                future.setResultMessage(results.getMsgs()[i]);\n            }\n        }\n    } else if (rpcMessage.getBody() instanceof BatchResultMessage) {\n        // \u5904\u7406 BatchResultMessage\n        try {\n            BatchResultMessage batchResultMessage = (BatchResultMessage) rpcMessage.getBody();\n            for (int i = 0; i < batchResultMessage.getMsgIds().size(); i++) {\n                int msgId = batchResultMessage.getMsgIds().get(i);\n                MessageFuture future = futures.remove(msgId);\n                if (future == null) {\n                    LOGGER.error("msg: {} is not found in futures, result message: {}", msgId, batchResultMessage.getResultMessages().get(i));\n                } else {\n                    future.setResultMessage(batchResultMessage.getResultMessages().get(i));\n                }\n            }\n        } finally {\n            // In order to be compatible with the old version, in the batch sending of version 1.5.0,\n            // batch messages will also be placed in the local cache of mergeMsgMap,\n            // but version 1.5.0 no longer needs to obtain batch messages from mergeMsgMap\n            mergeMsgMap.clear();\n        }\n    } else {\n        // \u5904\u7406\u975e\u6279\u91cf\u53d1\u9001\u62a5\u6587\n        MessageFuture messageFuture = futures.remove(rpcMessage.getId());\n        if (messageFuture != null) {\n            messageFuture.setResultMessage(rpcMessage.getBody());\n        } else {\n            if (rpcMessage.getBody() instanceof AbstractResultMessage) {\n                if (transactionMessageHandler != null) {\n                    transactionMessageHandler.onResponse((AbstractResultMessage) rpcMessage.getBody(), null);\n                }\n            }\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"\u5f53\u7136\uff0c\u8fd9\u91cc\u5904\u7406\u7684\u903b\u8f91\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u5c06\u7ed3\u679c\u585e\u5230\u5bf9\u5e94\u7684 MessageFuture \u4e2d\uff0c\u90a3\u4e48\u6700\u5f00\u59cb\u53d1\u9001\u8bf7\u6c42\u7684\u3001\u963b\u585e\u7684\u7ebf\u7a0b\u5c31\u53ef\u4ee5\u62ff\u5230\u7ed3\u679c\u4e86\uff0c\u8fd9\u6837\u4e00\u6b21\u6279\u91cf\u53d1\u9001\u548c\u54cd\u5e94\u5c31\u7b97\u5904\u7406\u5b8c\u6bd5\u4e86\u3002"}),"\n",(0,r.jsx)(n.p,{children:"\u6211\u4eec\u518d\u505a\u4e00\u4e9b\u989d\u5916\u7684\u601d\u8003\uff0cSeata \u7684\u6279\u91cf\u53d1\u9001\u4e3a\u4ec0\u4e48\u6709\u4e24\u79cd\u65b9\u5f0f\uff0c\u5b70\u4f18\u5b70\u52a3\uff1f"}),"\n",(0,r.jsx)(n.p,{children:"\u5bf9\u4e8e MergeResultMessage \u7684\u8fd9\u79cd\u65b9\u5f0f\u6765\u8bf4\uff0c\u5b83\u5fc5\u987b\u7b49\u5230\u6240\u6709\u7684\u62a5\u6587\u90fd\u5904\u7406\u5b8c\u6bd5\u4e4b\u540e\u624d\u4f1a\u53d1\u9001\u51fa\u53bb\uff0c\u6240\u4ee5\u5176\u5b9e\u5b83\u7684\u54cd\u5e94\u901f\u5ea6\u53d7\u9650\u4e8e\u5904\u7406\u6700\u957f\u65f6\u95f4\u7684\u62a5\u6587\uff0c\u5373\u4f7f\u5176\u4ed6\u62a5\u6587\u5728\u5f88\u77ed\u65f6\u95f4\u5185\u5c31\u53ef\u4ee5\u53d1\u9001\u51fa\u53bb\u3002"}),"\n",(0,r.jsx)(n.p,{children:"\u800c BatchResultMessage \u8fd9\u79cd\u65b9\u5f0f\u5219\u4e0d\u7136\uff0c\u914d\u5408 CompletableFuture \u8fdb\u884c\u5e76\u884c\u5904\u7406\uff0c\u5b83\u5c31\u53ef\u4ee5\u5b9e\u73b0\u4e00\u6709\u62a5\u6587\u5904\u7406\u5b8c\u6bd5\u5c31\u53d1\u9001\uff0c\u800c\u4e0d\u9700\u8981\u7b49\u5176\u4ed6\u62a5\u6587\u7684\u5904\u7406\uff0c\u5b83\u7684\u54cd\u5e94\u901f\u5ea6\u80af\u5b9a\u662f\u66f4\u5feb\u7684\u3002"}),"\n",(0,r.jsx)(n.p,{children:"\u800c\u540e\u9762\u8fd9\u79cd\u65b9\u5f0f\u662f Seata 1.5 \u7248\u672c\u4e4b\u540e\u624d\u6709\u7684\uff0c\u5176\u5b9e\u4e5f\u53ef\u4ee5\u770b\u51fa\u6765\u8fd9\u662f\u4e00\u79cd\u66f4\u597d\u5730\u5904\u7406\u65b9\u5f0f\u3002"}),"\n",(0,r.jsx)(n.p,{children:"\u6700\u540e\uff0c\u518d\u5206\u4eab\u4e00\u5f20 Seata RPC \u91cd\u6784\u4f5c\u8005\u7684\u5168\u5c40\u4e8b\u52a1\u63d0\u4ea4\u8bf7\u6c42\u7684\u4ea4\u4e92\u6d41\u7a0b\u56fe\uff1a"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"image-20241217222048505",src:t(49746).A+"",width:"1080",height:"519"})}),"\n",(0,r.jsx)(n.h2,{id:"seata-\u5982\u4f55\u7ba1\u7406-channel",children:"Seata \u5982\u4f55\u7ba1\u7406 Channel"}),"\n",(0,r.jsx)(n.p,{children:"\u5728\u6574\u4e2a TC\u3001TM\u3001RM \u7684\u7f51\u7edc\u901a\u4fe1\u7684\u8fc7\u7a0b\u4e2d\uff0cChannel \u662f\u4e00\u4e2a\u81f3\u5173\u91cd\u8981\u7684\u901a\u4fe1\u7ec4\u4ef6\uff0c\u800c\u8981\u60f3\u77e5\u9053 Seata \u662f\u600e\u4e48\u7ba1\u7406 Channel \u7684\uff0c\u6700\u5bb9\u6613\u60f3\u5230\u7684\u5165\u53e3\u5c31\u662f\u770b Server \u548c Client \u53d1\u9001\u62a5\u6587\u65f6\u662f\u4ece\u54ea\u91cc\u62ff\u5230\u5230 Channel \u7684\u3002"}),"\n",(0,r.jsx)(n.p,{children:"\u5728 AbstractNettyRemotingClient \u7c7b\u7684 sendSyncRequest \u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u4e0b\u9762\u7684\u4ee3\u7801\uff1a"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public Object sendSyncRequest(Object msg) throws TimeoutException {\n    // ...\n    // Client \u901a\u8fc7 NettyClientChannelManager \u83b7\u53d6 Channel\n    Channel channel = clientChannelManager.acquireChannel(serverAddress);\n    return super.sendSync(channel, rpcMessage, timeoutMillis);\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"\u800c\u5728 AbstractNettyRemotingServer \u7c7b\u7684 sendSyncRequest \u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u4e0b\u9762\u7684\u4ee3\u7801\uff1a"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'public Object sendSyncRequest(String resourceId, String clientId, Object msg, boolean tryOtherApp) throws TimeoutException {\n    // Server \u901a\u8fc7 ChannelManager \u62ff\u5230 Channel\n    Channel channel = ChannelManager.getChannel(resourceId, clientId, tryOtherApp);\n    if (channel == null) {\n        throw new RuntimeException("rm client is not connected. dbkey:" + resourceId + ",clientId:" + clientId);\n    }\n    RpcMessage rpcMessage = buildRequestMessage(msg, ProtocolConstants.MSGTYPE_RESQUEST_SYNC);\n    return super.sendSync(channel, rpcMessage, NettyServerConfig.getRpcRequestTimeout());\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"\u6240\u4ee5 Client \u4e3b\u8981\u662f\u901a\u8fc7 NettyClientChannelManager \u4e2d\u83b7\u53d6 Channel\uff0c\u800c Server \u5219\u662f\u6839\u636e resourceId \u548c clientId \u4ece ChannelManager \u4e2d\u83b7\u53d6 Channel\u3002"}),"\n",(0,r.jsx)(n.p,{children:"\u6240\u4ee5\u4e0b\u9762\u6211\u4eec\u4e3b\u8981\u7814\u7a76\u7684\u5c31\u662f\u8fd9\u4e24\u4e2a\u7c7b\uff0c\u4ee5\u53ca\u76f8\u5173\u7684\u4e00\u4e9b\u903b\u8f91\u3002"}),"\n",(0,r.jsx)(n.h3,{id:"client-channel",children:"Client Channel"}),"\n",(0,r.jsx)(n.p,{children:"\u6211\u4eec\u5148\u6765\u770b Client \u8fd9\u8fb9\u662f\u600e\u4e48\u7ba1\u7406 Channel \u7684\uff0c\u6838\u5fc3\u7c7b\u662f NettyClientChannelManager\u3002"}),"\n",(0,r.jsx)(n.p,{children:"\u5148\u7b80\u5355\u770b\u4e00\u4e0b\u8fd9\u4e2a\u7c7b\u7684\u5c5e\u6027\uff0c"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"// serverAddress -> lock\nprivate final ConcurrentMap<String, Object> channelLocks = new ConcurrentHashMap<>();\n// serverAddress -> NettyPoolKey\nprivate final ConcurrentMap<String, NettyPoolKey> poolKeyMap = new ConcurrentHashMap<>();\n// serverAddress -> Channel\nprivate final ConcurrentMap<String, Channel> channels = new ConcurrentHashMap<>();\n// \u5bf9\u8c61\u6c60\uff0cNettyPoolKey -> Channel\nprivate final GenericKeyedObjectPool<NettyPoolKey, Channel> nettyClientKeyPool;\n// \u51fd\u6570\u5f0f\u63a5\u53e3\uff0c\u5c01\u88c5\u4e86\u901a\u8fc7 serverAddress \u83b7\u53d6 NettyPoolKey \u7684\u903b\u8f91\nprivate final Function<String, NettyPoolKey> poolKeyFunction;\n"})}),"\n",(0,r.jsx)(n.h4,{id:"\u5bf9\u8c61\u6c60\u7684\u6838\u5fc3\u7c7b",children:"\u5bf9\u8c61\u6c60\u7684\u6838\u5fc3\u7c7b"}),"\n",(0,r.jsx)(n.p,{children:"Seata \u4f7f\u7528\u4e86 GenericKeyedObjectPool \u4f5c\u4e3a\u7ba1\u7406 Channel \u7684\u5bf9\u8c61\u6c60\u3002"}),"\n",(0,r.jsx)(n.p,{children:"GenericKeyedObjectPool \u4f5c\u4e3a Apache Commons Pool \u5e93\u4e2d\u7684\u4e00\u4e2a\u5b9e\u73b0\uff0c\u5b83\u4e3b\u8981\u7528\u4e8e\u7ba1\u7406\u4e00\u7ec4\u5bf9\u8c61\u6c60\uff0c\u6bcf\u4e2a\u5bf9\u8c61\u901a\u8fc7\u552f\u4e00\u7684 Key \u8fdb\u884c\u533a\u5206\uff0c\u53ef\u4ee5\u652f\u6301\u591a\u7c7b\u578b\u7684\u5bf9\u8c61\u6c60\u5316\u9700\u6c42\u3002"}),"\n",(0,r.jsx)(n.p,{children:"\u5728\u4f7f\u7528 GenericKeyedObjectPool \u65f6\uff0c\u901a\u5e38\u8fd8\u9700\u8981\u914d\u7f6e KeyedPoolableObjectFactory \u5de5\u5382\uff0c\u8fd9\u4e2a\u5de5\u5382\u5b9a\u4e49\u4e86\u5982\u4f55\u521b\u5efa\u3001\u9a8c\u8bc1\u3001\u6fc0\u6d3b\u3001\u949d\u5316\u4ee5\u53ca\u9500\u6bc1\u6c60\u4e2d\u7684\u5bf9\u8c61\u3002"}),"\n",(0,r.jsx)(n.p,{children:"\u5f53 GenericKeyedObjectPool \u9700\u8981\u521b\u5efa\u5bf9\u8c61\u65f6\u4f1a\u8c03\u7528 KeyedPoolableObjectFactory \u5de5\u5382\u7684 makeObject \u65b9\u6cd5\uff0c\u5f53\u9700\u8981\u9500\u6bc1\u65f6\u4f1a\u8c03\u7528 destroyObject \u65b9\u6cd5\u8fdb\u884c\u9500\u6bc1 \u2026\u2026"}),"\n",(0,r.jsx)(n.h4,{id:"\u5982\u4f55\u6c60\u5316-channel",children:"\u5982\u4f55\u6c60\u5316 Channel"}),"\n",(0,r.jsx)(n.p,{children:"\u88ab\u6c60\u5316\u7684\u5bf9\u8c61\u5c31\u662f Channel\uff0c\u800c\u5bf9\u5e94\u7684 Key \u662f NettyPoolKey\uff0c\u5982\u4e0b\uff1a"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public class NettyPoolKey {\n\n    private TransactionRole transactionRole;\n    private String address;\n    private AbstractMessage message;\n\n    // ...\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"\u5728 NettyPoolKey \u4e2d\uff0c\u7ef4\u62a4\u4e86\u4e09\u4e2a\u4fe1\u606f\uff0c\u4e8b\u52a1\u89d2\u8272\uff08TM\u3001RM\u3001Server\uff09\uff0c\u76ee\u7684 TC Server \u5730\u5740\uff0c\u4ee5\u53ca\u5728 Client \u8fde\u63a5 Server \u65f6\u53d1\u9001\u7684 RPC \u62a5\u6587\u3002"}),"\n",(0,r.jsx)(n.p,{children:"\u5982\u4f55\u521b\u5efa\u8fd9\u4e2a NettyPoolKey \u5462\uff1f\u5728 Seata \u4e2d\uff0c\u5ba2\u6237\u7aef\u5176\u5b9e\u662f\u6709\u4e24\u79cd\u89d2\u8272\u7684\uff0cTM \u548c RM\uff0c\u521b\u5efa\u7684\u903b\u8f91\u80af\u5b9a\u662f\u4e0d\u4e00\u6837\u7684\uff0c\u6240\u4ee5\uff0cSeata \u5728 AbstractNettyRemotingClient \u4e2d\u62bd\u8c61\u4e86\u4e00\u4e2a\u65b9\u6cd5\uff0c\u5b83\u7684\u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u51fd\u6570\u5f0f\u63a5\u53e3\uff0c\u8fd9\u4e2a\u51fd\u6570\u5f0f\u63a5\u53e3\u5c31\u5c01\u88c5\u4e86\u6839\u636e serverAddress \u521b\u5efa NettyPoolKey \u7684\u903b\u8f91\u3002"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"// org.apache.seata.core.rpc.netty.AbstractNettyRemotingClient#getPoolKeyFunction\nprotected abstract Function<String, NettyPoolKey> getPoolKeyFunction();\n"})}),"\n",(0,r.jsx)(n.p,{children:"\u6bd4\u5982\u5728 TM \u4e2d\u7684\u5b9e\u73b0\u662f\uff1a"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"protected Function<String, NettyPoolKey> getPoolKeyFunction() {\n    return severAddress -> {\n        RegisterTMRequest message = new RegisterTMRequest(applicationId, transactionServiceGroup, getExtraData());\n        return new NettyPoolKey(NettyPoolKey.TransactionRole.TM_ROLE, severAddress, message);\n    };\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"\u800c\u5728 RM \u4e2d\u7684\u5b9e\u73b0\u662f\uff1a"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'protected Function<String, NettyPoolKey> getPoolKeyFunction() {\n    return serverAddress -> {\n        String resourceIds = getMergedResourceKeys();\n        if (resourceIds != null && LOGGER.isInfoEnabled()) {\n            LOGGER.info("RM will register: {}", resourceIds);\n        }\n        RegisterRMRequest message = new RegisterRMRequest(applicationId, transactionServiceGroup);\n        message.setResourceIds(resourceIds);\n        return new NettyPoolKey(NettyPoolKey.TransactionRole.RM_ROLE, serverAddress, message);\n    };\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"\u4ece\u8fd9\u91cc\u5c31\u53ef\u4ee5\u770b\u5230\uff0cTM \u5728\u8fde\u63a5 Server \u540e\u53d1\u9001\u7684\u62a5\u6587\u662f RegisterTMRequest\uff0c\u800c RM \u662f RegisterRMRequest\u3002"}),"\n",(0,r.jsx)(n.p,{children:"\u90a3\u8fd9\u4e2a\u51fd\u6570\u5f0f\u63a5\u53e3\u5728\u4ec0\u4e48\u65f6\u5019\u88ab\u8c03\u7528\u5462\uff0c\u540e\u9762\u518d\u770b\u3002"}),"\n",(0,r.jsx)(n.p,{children:"\u6211\u4eec\u524d\u9762\u4e5f\u8bf4\u5230\u4e86\uff0c\u4e00\u4e2a\u5bf9\u8c61\u6c60\uff0c\u4f1a\u914d\u5907\u5bf9\u5e94\u7684\u5bf9\u8c61\u521b\u5efa\u5de5\u5382 KeyedPoolableObjectFactory\uff0c\u5728 Seata \u4e2d\uff0c\u4ee5 NettyPoolableFactory \u7ee7\u627f KeyedPoolableObjectFactory \u6765\u5b9e\u73b0\u3002"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'/**\n * Netty Channel \u521b\u5efa\u5de5\u5382\uff0c\u901a\u8fc7 NettyPoolKey \u521b\u5efa Channel\uff0c\u8be5\u7c7b\u7684\u65b9\u6cd5\u5fc5\u987b\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\n */\npublic class NettyPoolableFactory implements KeyedPoolableObjectFactory<NettyPoolKey, Channel> {\n\n    // ...\n    \n    /**\n     * \u9700\u8981\u4e00\u4e2a\u65b0\u7684\u5b9e\u4f8b\u5219\u8c03\u7528\u8be5\u65b9\u6cd5\n     */\n    @Override\n    public Channel makeObject(NettyPoolKey key) {\n        InetSocketAddress address = NetUtil.toInetSocketAddress(key.getAddress());\n        // \u521b\u5efa Channel\uff0c\u672c\u8d28\u4e0a\u5c31\u662f\u901a\u8fc7 bootstrap.connect \u8fde\u63a5\u5230 Seata Server \u8fd4\u56de Channel\n        Channel tmpChannel = clientBootstrap.getNewChannel(address);\n        long start = System.currentTimeMillis();\n        Object response;\n        Channel channelToServer = null;\n        if (key.getMessage() == null) {\n            throw new FrameworkException("register msg is null, role:" + key.getTransactionRole().name());\n        }\n        try {\n            // \u53d1\u9001 Message\uff0cTM \u5c31\u662f RegisterTMRequest\uff0cRM \u5c31\u662f RegisterRMRequest\n            response = rpcRemotingClient.sendSyncRequest(tmpChannel, key.getMessage());\n            // \u6839\u636e response \u5224\u65ad\u662f\u5426\u6ce8\u518c\u6210\u529f\n            if (!isRegisterSuccess(response, key.getTransactionRole())) {\n                rpcRemotingClient.onRegisterMsgFail(key.getAddress(), tmpChannel, response, key.getMessage());\n            } else {\n                // \u6ce8\u518c\u6210\u529f\n                channelToServer = tmpChannel;\n                // \u5c06 serverAddress \u4f5c\u4e3a key\uff0cChannel \u4f5c\u4e3a value\uff0c\u6dfb\u52a0\u5230 NettyClientChannelManager.channels \u4e2d\n                // \u5982\u679c\u662f RM \u53ef\u80fd\u8fd8\u9700\u8981\u5c06 Server \u6ce8\u518c resources\n                rpcRemotingClient.onRegisterMsgSuccess(key.getAddress(), tmpChannel, response, key.getMessage());\n            }\n        } catch (Exception exx) {\n            if (tmpChannel != null) {\n                tmpChannel.close();\n            }\n            throw new FrameworkException("register " + key.getTransactionRole().name() + " error, errMsg:" + exx.getMessage());\n        }\n        return channelToServer;\n    }\n\n    // ...\n\n    @Override\n    public void destroyObject(NettyPoolKey key, Channel channel) throws Exception {\n        if (channel != null) {\n            channel.disconnect();\n            channel.close();\n        }\n    }\n\n    /**\n     * \u9700\u8981\u501f\u7528\u5bf9\u8c61\u65f6\u4f1a\u8c03\u7528\u8be5\u65b9\u6cd5\u6821\u9a8c\u5bf9\u8c61\u6709\u6548\u6027\uff08\u53ef\u9009\uff09\n     */\n    @Override\n    public boolean validateObject(NettyPoolKey key, Channel obj) {\n        if (obj != null && obj.isActive()) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * \u9700\u8981\u501f\u7528\u5bf9\u8c61\u65f6\u4f1a\u8c03\u7528\u8be5\u65b9\u6cd5\u6fc0\u6d3b\u5bf9\u8c61\n     */\n    @Override\n    public void activateObject(NettyPoolKey key, Channel obj) throws Exception {}\n\n    /**\n     * \u5f52\u8fd8\u5bf9\u8c61\u65f6\u4f1a\u8c03\u7528\u8be5\u65b9\u6cd5\u949d\u5316\u5bf9\u8c61\n     */\n    @Override\n    public void passivateObject(NettyPoolKey key, Channel obj) throws Exception {}\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"\u83b7\u53d6-channel",children:"\u83b7\u53d6 Channel"}),"\n",(0,r.jsx)(n.p,{children:"\u5728\u6574\u4e2a Seata \u5ba2\u6237\u7aef\uff0c\u6709\u4e09\u4e2a\u53e3\u5f84\u53ef\u4ee5\u83b7\u53d6 Channel\uff0c\u5373\u521d\u59cb\u5316\u3001\u5b9a\u65f6\u91cd\u8fde\uff0c\u53d1\u9001\u62a5\u6587\u65f6\u83b7\u53d6 Channel\u3002"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// \u53e3\u5f84\u4e00\nprivate void initConnection() {\n    boolean failFast =\n            ConfigurationFactory.getInstance().getBoolean(ConfigurationKeys.ENABLE_TM_CLIENT_CHANNEL_CHECK_FAIL_FAST, DefaultValues.DEFAULT_CLIENT_CHANNEL_CHECK_FAIL_FAST);\n    getClientChannelManager().initReconnect(transactionServiceGroup, failFast);\n}\n\n// \u53e3\u5f84\u4e8c\npublic void init() {\n    // \u9ed8\u8ba4\u5ef6\u65f6 60s \u5b9a\u65f6 10s \u5468\u671f\u91cd\u8fde\n    timerExecutor.scheduleAtFixedRate(() -> {\n        try {\n            clientChannelManager.reconnect(getTransactionServiceGroup());\n        } catch (Exception ex) {\n            LOGGER.warn("reconnect server failed. {}", ex.getMessage());\n        }\n    }, SCHEDULE_DELAY_MILLS, SCHEDULE_INTERVAL_MILLS, TimeUnit.MILLISECONDS);\n    // ...\n}\n\n// \u53e3\u5f84\u4e09\npublic Object sendSyncRequest(Object msg) throws TimeoutException {\n    // ...\n    // Client \u901a\u8fc7 NettyClientChannelManager \u83b7\u53d6 Channel\n    Channel channel = clientChannelManager.acquireChannel(serverAddress);\n    return super.sendSync(channel, rpcMessage, timeoutMillis);\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"\u4e0d\u8fc7\uff0c\u8fd9\u4e09\u4e2a\u53e3\u5f84\u6700\u540e\u90fd\u4f1a\u8c03\u7528\u5230 clientChannelManager \u7684 acquireChannel \u65b9\u6cd5\u83b7\u53d6 Channel\u3002"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'/**\n * \u6839\u636e serverAddress \u62ff\u5230 Channel\uff0c\u5982\u679c Channel \u4e0d\u5b58\u5728\u6216\u8005\u8fde\u63a5\u5df2\u6b7b\u5219\u9700\u8981\u91cd\u65b0\u5efa\u7acb\u8fde\u63a5\n */\nChannel acquireChannel(String serverAddress) {\n    // \u4ece channels \u4e2d\u6839\u636e serverAddress \u62ff\u5230 Channel\n    Channel channelToServer = channels.get(serverAddress);\n    if (channelToServer != null) {\n        channelToServer = getExistAliveChannel(channelToServer, serverAddress);\n        if (channelToServer != null) {\n            return channelToServer;\n        }\n    }\n    // \u5982\u679c channels \u6ca1\u6709\u8fd9\u4e2a Channel \u6216\u8005\u8fd9\u4e2a Channel \u5df2\u6b7b\uff0c\u5219\u9700\u8981\u5bf9\u8fd9\u4e2a\u5730\u5740\u5efa\u7acb\u8fde\u63a5\n    Object lockObj = CollectionUtils.computeIfAbsent(channelLocks, serverAddress, key -> new Object());\n    synchronized (lockObj) {\n        // \u5efa\u7acb\u8fde\u63a5\n        return doConnect(serverAddress);\n    }\n}\n\nprivate Channel doConnect(String serverAddress) {\n    // \u518d\u5c1d\u8bd5\u62ff\u4e00\u6b21\n    Channel channelToServer = channels.get(serverAddress);\n    if (channelToServer != null && channelToServer.isActive()) {\n        return channelToServer;\n    }\n    Channel channelFromPool;\n    try {\n        // \u8fd9\u91cc\u5c31\u8c03\u7528\u4e86\u51fd\u6570\u5f0f\u63a5\u53e3\n        NettyPoolKey currentPoolKey = poolKeyFunction.apply(serverAddress);\n        poolKeyMap.put(serverAddress, currentPoolKey);\n        // \u4ece\u5bf9\u8c61\u6c60\u4e2d borrowObject\uff0c\u5982\u679c\u9700\u8981\u521b\u5efa\u5bf9\u8c61\uff0c\u5219\u4f1a\u8c03\u7528\u5de5\u5382\u7684 makeObject \u65b9\u6cd5\uff0c\n        // \u8be5\u65b9\u6cd5\u5185\u90e8\u5c31\u4f1a\u5411 Server \u8fdb\u884c connect\uff0c\u5e76\u4e14\u53d1\u9001 currentPoolKey.message \u7684\u62a5\u6587\n        channelFromPool = nettyClientKeyPool.borrowObject(currentPoolKey);\n        channels.put(serverAddress, channelFromPool);\n    } catch (Exception exx) {\n        LOGGER.error("{} register RM failed.", FrameworkErrorCode.RegisterRM.getErrCode(), exx);\n        throw new FrameworkException("can not register RM,err:" + exx.getMessage());\n    }\n    return channelFromPool;\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"server-channel",children:"Server Channel"}),"\n",(0,r.jsx)(n.p,{children:"\u800c\u5728 Server \u8fd9\u8fb9\uff0c\u57fa\u672c\u4e0a\u6709\u5173 Channe \u7ba1\u7406\u7684\u6838\u5fc3\u903b\u8f91\u90fd\u5728 ChannelManager \u4e2d\uff0c\u90a3 Server \u8fd9\u8fb9\u7684 Channel \u662f\u600e\u4e48\u6765\u7684\u5462\uff1f\u8fd8\u8bb0\u5f97\u5728 Client \u90a3\u8fb9\u5411 Server \u53d1\u8d77\u8fde\u63a5\uff0c\u6210\u529f\u4e4b\u540e\u8fd8\u4f1a\u53d1\u9001 TM \u548c RM \u7684\u4e00\u4e2a\u6ce8\u518c\u8bf7\u6c42\u3002"}),"\n",(0,r.jsx)(n.p,{children:"\u8fd9\u91cc\u5148\u6765\u770b\u770b Server \u662f\u600e\u4e48\u5904\u7406\u8fd9\u4e9b registerRequest \u7684\u3002"}),"\n",(0,r.jsx)(n.h4,{id:"\u5904\u7406-client-\u6ce8\u518c",children:"\u5904\u7406 Client \u6ce8\u518c"}),"\n",(0,r.jsx)(n.p,{children:"\u4e0e\u4e4b\u76f8\u5173\u7684\u5904\u7406\u5668\u662f RegRmProcessor \u548c RegTmProcessor\uff0c\u5728\u8fd9\u4e24\u4e2a\u5904\u7406\u5668\u4e2d\uff0c\u6700\u6838\u5fc3\u7684\u903b\u8f91\u5c31\u662f\u8c03\u7528 ChannelManager \u7684 registerTMChannel \u548c registerRMChannel \u65b9\u6cd5\u3002"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static void registerTMChannel(RegisterTMRequest request, Channel channel) throws IncompatibleVersionException {\n    // \u6784\u5efa RpcContext\uff0c\u8fd9\u4e2a RpcContext \u5c31\u662f\u7ef4\u62a4\u4e86\u5ba2\u6237\u7aef\u8fde\u63a5\u4fe1\u606f\u4e0a\u4e0b\u6587\n    RpcContext rpcContext = buildChannelHolder(NettyPoolKey.TransactionRole.TM_ROLE, request.getVersion(),\n            request.getApplicationId(),\n            request.getTransactionServiceGroup(),\n            null, channel);\n    // \u5c06 Channel \u4f5c\u4e3a key\uff0crpcContext \u4f5c\u4e3a value\uff0cput \u5230 IDENTIFIED_CHANNELS \u4e2d\n    rpcContext.holdInIdentifiedChannels(IDENTIFIED_CHANNELS);\n    // applicationId:clientIp\n    String clientIdentified = rpcContext.getApplicationId() + Constants.CLIENT_ID_SPLIT_CHAR + ChannelUtil.getClientIpFromChannel(channel);\n    // \u5c06 Channel \u4fe1\u606f\u5b58\u50a8\u5230 TM_CHANNELS \u4e2d\n    ConcurrentMap<Integer, RpcContext> clientIdentifiedMap = CollectionUtils.computeIfAbsent(TM_CHANNELS, clientIdentified, key -> new ConcurrentHashMap<>());\n    rpcContext.holdInClientChannels(clientIdentifiedMap);\n}\n\npublic static void registerRMChannel(RegisterRMRequest resourceManagerRequest, Channel channel) throws IncompatibleVersionException {\n    Set<String> dbkeySet = dbKeytoSet(resourceManagerRequest.getResourceIds());\n    RpcContext rpcContext;\n    if (!IDENTIFIED_CHANNELS.containsKey(channel)) {\n        // \u6784\u5efa RpcContext \u548c IDENTIFIED_CHANNELS\n        rpcContext = buildChannelHolder(NettyPoolKey.TransactionRole.RM_ROLE, resourceManagerRequest.getVersion(),\n                resourceManagerRequest.getApplicationId(), resourceManagerRequest.getTransactionServiceGroup(),\n                resourceManagerRequest.getResourceIds(), channel);\n        rpcContext.holdInIdentifiedChannels(IDENTIFIED_CHANNELS);\n    } else {\n        rpcContext = IDENTIFIED_CHANNELS.get(channel);\n        rpcContext.addResources(dbkeySet);\n    }\n    if (dbkeySet == null || dbkeySet.isEmpty()) {\n        return;\n    }\n    for (String resourceId : dbkeySet) {\n        String clientIp;\n        // \u7ef4\u62a4 RM_CHANNELS \u4fe1\u606f\n        ConcurrentMap<Integer, RpcContext> portMap = CollectionUtils.computeIfAbsent(RM_CHANNELS, resourceId, key -> new ConcurrentHashMap<>())\n                .computeIfAbsent(resourceManagerRequest.getApplicationId(), key -> new ConcurrentHashMap<>())\n                .computeIfAbsent(clientIp = ChannelUtil.getClientIpFromChannel(channel), key -> new ConcurrentHashMap<>());\n        rpcContext.holdInResourceManagerChannels(resourceId, portMap);\n        updateChannelsResource(resourceId, clientIp, resourceManagerRequest.getApplicationId());\n    }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"\u8fd9\u4e24\u4e2a\u65b9\u6cd5\u903b\u8f91\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u57fa\u4e8e\u6ce8\u518c\u8bf7\u6c42\u548c Channel \u7684\u4fe1\u606f\u6784\u5efa RpcContext\uff0c\u7ef4\u62a4 Server \u5185\u7684\u76f8\u5173 Map \u96c6\u5408\uff0cIDENTIFIED_CHANNELS\u3001RM_CHANNELS\u3001TM_CHANNELS\u3002"}),"\n",(0,r.jsx)(n.p,{children:"\u4f46\u662f\uff0c\u8bf4\u5b9e\u8bdd\uff0c\u8fd9\u51e0\u4e2a\u96c6\u5408\u5b9e\u5728\u662f\u5d4c\u5957\u7684\u6709\u70b9\u6df1\uff0c\u4e0d\u77e5\u9053\u80fd\u4e0d\u80fd\u4f18\u5316\u4e00\u4e0b\u3002"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"/**\n * Channel -> RpcContext\n */\nprivate static final ConcurrentMap<Channel, RpcContext> IDENTIFIED_CHANNELS = new ConcurrentHashMap<>();\n\n/**\n * resourceId -> applicationId -> ip -> port -> RpcContext\n */\n//                               resourceId          applicationId               ip\nprivate static final ConcurrentMap<String, ConcurrentMap<String, ConcurrentMap<String,\n        //             port    RpcContext\n        ConcurrentMap<Integer, RpcContext>>>> RM_CHANNELS = new ConcurrentHashMap<>();\n\n/**\n * applicationId:clientIp -> port -> RpcContext\n */\nprivate static final ConcurrentMap<String, ConcurrentMap<Integer, RpcContext>> TM_CHANNELS = new ConcurrentHashMap<>();\n"})}),"\n",(0,r.jsx)(n.h4,{id:"\u83b7\u53d6-channel-1",children:"\u83b7\u53d6 Channel"}),"\n",(0,r.jsx)(n.p,{children:"\u5728 Server \u8fd9\u8fb9\uff0c\u83b7\u53d6 Channel \u7684\u903b\u8f91\uff0c\u771f\u7684\u662f\u8d85\u957f\uff0c\u611f\u5174\u8da3\u81ea\u5df1\u770b\u770b\u5427\uff0c\u672c\u8d28\u4e0a\u5c31\u662f\u4ece map \u4e2d\u62ff\u5230\u4e00\u4e2a\u6709\u6548\u7684 Channel\u3002"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'public static Channel getChannel(String resourceId, String clientId, boolean tryOtherApp) {\n    Channel resultChannel = null;\n    // \u89e3\u6790 ClientId\uff0c\u4e09\u90e8\u5206\u7ec4\u6210\uff1aapplicationId + clientIp + clientPort\n    String[] clientIdInfo = parseClientId(clientId);\n    if (clientIdInfo == null || clientIdInfo.length != 3) {\n        throw new FrameworkException("Invalid Client ID: " + clientId);\n    }\n    if (StringUtils.isBlank(resourceId)) {\n        if (LOGGER.isInfoEnabled()) {\n            LOGGER.info("No channel is available, resourceId is null or empty");\n        }\n        return null;\n    }\n    // applicationId\n    String targetApplicationId = clientIdInfo[0];\n    // clientIp\n    String targetIP = clientIdInfo[1];\n    // clientPort\n    int targetPort = Integer.parseInt(clientIdInfo[2]);\n    // \u4e0b\u9762\u5c31\u662f\u4e0d\u65ad\u53d6\u51fa\u5185\u5c42\u7684 ConcurrentHashMap\n    ConcurrentMap<String, ConcurrentMap<String, ConcurrentMap<Integer, RpcContext>>> applicationIdMap = RM_CHANNELS.get(resourceId);\n    if (targetApplicationId == null || applicationIdMap == null || applicationIdMap.isEmpty()) {\n        if (LOGGER.isInfoEnabled()) {\n            LOGGER.info("No channel is available for resource[{}]", resourceId);\n        }\n        return null;\n    }\n    ConcurrentMap<String, ConcurrentMap<Integer, RpcContext>> ipMap = applicationIdMap.get(targetApplicationId);\n    if (ipMap != null && !ipMap.isEmpty()) {\n        // Firstly, try to find the original channel through which the branch was registered.\n        // \u7aef\u53e3 -> RpcContext\n        ConcurrentMap<Integer, RpcContext> portMapOnTargetIP = ipMap.get(targetIP);\n        /**\n         * \u5728 targetIp \u4e0a\u62ff Channel\n         */\n        if (portMapOnTargetIP != null && !portMapOnTargetIP.isEmpty()) {\n            RpcContext exactRpcContext = portMapOnTargetIP.get(targetPort);\n            if (exactRpcContext != null) {\n                Channel channel = exactRpcContext.getChannel();\n                if (channel.isActive()) {\n                    // Channel \u6709\u6548\uff0c\u5219\u8df3\u8fc7\u4e0b\u9762\u6240\u6709\u7684 if \u8fd4\u56de\u8fd9\u4e2a Channel\n                    resultChannel = channel;\n                    if (LOGGER.isDebugEnabled()) {\n                        LOGGER.debug("Just got exactly the one {} for {}", channel, clientId);\n                    }\n                } else {\n                    if (portMapOnTargetIP.remove(targetPort, exactRpcContext)) {\n                        if (LOGGER.isInfoEnabled()) {\n                            LOGGER.info("Removed inactive {}", channel);\n                        }\n                    }\n                }\n            }\n            // The original channel was broken, try another one.\n            if (resultChannel == null) {\n                // \u5c1d\u8bd5\u5f53\u524d\u8282\u70b9\u4e0a\u7684\u5176\u4ed6\u7aef\u53e3\n                for (ConcurrentMap.Entry<Integer, RpcContext> portMapOnTargetIPEntry : portMapOnTargetIP.entrySet()) {\n                    Channel channel = portMapOnTargetIPEntry.getValue().getChannel();\n                    if (channel.isActive()) {\n                        resultChannel = channel;\n                        if (LOGGER.isInfoEnabled()) {\n                            LOGGER.info(\n                                    "Choose {} on the same IP[{}] as alternative of {}", channel, targetIP, clientId);\n                        }\n                        break;\n                    } else {\n                        if (portMapOnTargetIP.remove(portMapOnTargetIPEntry.getKey(),\n                                portMapOnTargetIPEntry.getValue())) {\n                            if (LOGGER.isInfoEnabled()) {\n                                LOGGER.info("Removed inactive {}", channel);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        /**\n         * \u5728 targetApplicationId \u4e0a\u62ff Channel\n         */\n        // No channel on the app node, try another one.\n        if (resultChannel == null) {\n            for (ConcurrentMap.Entry<String, ConcurrentMap<Integer, RpcContext>> ipMapEntry : ipMap.entrySet()) {\n                if (ipMapEntry.getKey().equals(targetIP)) {\n                    continue;\n                }\n                ConcurrentMap<Integer, RpcContext> portMapOnOtherIP = ipMapEntry.getValue();\n                if (portMapOnOtherIP == null || portMapOnOtherIP.isEmpty()) {\n                    continue;\n                }\n                for (ConcurrentMap.Entry<Integer, RpcContext> portMapOnOtherIPEntry : portMapOnOtherIP.entrySet()) {\n                    Channel channel = portMapOnOtherIPEntry.getValue().getChannel();\n                    if (channel.isActive()) {\n                        resultChannel = channel;\n                        if (LOGGER.isInfoEnabled()) {\n                            LOGGER.info("Choose {} on the same application[{}] as alternative of {}", channel, targetApplicationId, clientId);\n                        }\n                        break;\n                    } else {\n                        if (portMapOnOtherIP.remove(portMapOnOtherIPEntry.getKey(), portMapOnOtherIPEntry.getValue())) {\n                            if (LOGGER.isInfoEnabled()) {\n                                LOGGER.info("Removed inactive {}", channel);\n                            }\n                        }\n                    }\n                }\n                if (resultChannel != null) {\n                    break;\n                }\n            }\n        }\n    }\n    if (resultChannel == null && tryOtherApp) {\n        // \u5c1d\u8bd5\u5176\u4ed6 applicationId\n        resultChannel = tryOtherApp(applicationIdMap, targetApplicationId);\n        if (resultChannel == null) {\n            if (LOGGER.isInfoEnabled()) {\n                LOGGER.info("No channel is available for resource[{}] as alternative of {}", resourceId, clientId);\n            }\n        } else {\n            if (LOGGER.isInfoEnabled()) {\n                LOGGER.info("Choose {} on the same resource[{}] as alternative of {}", resultChannel, resourceId, clientId);\n            }\n        }\n    }\n    return resultChannel;\n}\n\nprivate static Channel tryOtherApp(ConcurrentMap<String, ConcurrentMap<String, ConcurrentMap<Integer, RpcContext>>> applicationIdMap, String myApplicationId) {\n    Channel chosenChannel = null;\n    for (ConcurrentMap.Entry<String, ConcurrentMap<String, ConcurrentMap<Integer, RpcContext>>> applicationIdMapEntry : applicationIdMap.entrySet()) {\n        if (!StringUtils.isNullOrEmpty(myApplicationId) && applicationIdMapEntry.getKey().equals(myApplicationId)) {\n            continue;\n        }\n        ConcurrentMap<String, ConcurrentMap<Integer, RpcContext>> targetIPMap = applicationIdMapEntry.getValue();\n        if (targetIPMap == null || targetIPMap.isEmpty()) {\n            continue;\n        }\n        for (ConcurrentMap.Entry<String, ConcurrentMap<Integer, RpcContext>> targetIPMapEntry : targetIPMap.entrySet()) {\n            ConcurrentMap<Integer, RpcContext> portMap = targetIPMapEntry.getValue();\n            if (portMap == null || portMap.isEmpty()) {\n                continue;\n            }\n            for (ConcurrentMap.Entry<Integer, RpcContext> portMapEntry : portMap.entrySet()) {\n                Channel channel = portMapEntry.getValue().getChannel();\n                if (channel.isActive()) {\n                    chosenChannel = channel;\n                    break;\n                } else {\n                    if (portMap.remove(portMapEntry.getKey(), portMapEntry.getValue())) {\n                        if (LOGGER.isInfoEnabled()) {\n                            LOGGER.info("Removed inactive {}", channel);\n                        }\n                    }\n                }\n            }\n            if (chosenChannel != null) {\n                break;\n            }\n        }\n        if (chosenChannel != null) {\n            break;\n        }\n    }\n    return chosenChannel;\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"\u4e00\u56fe\u603b\u7ed3",children:"\u4e00\u56fe\u603b\u7ed3"}),"\n",(0,r.jsx)(n.p,{children:"\u6700\u540e\uff0c\u518d\u4ee5\u4e00\u4e2a\u65f6\u5e8f\u56fe\u6765\u603b\u7ed3\u4e00\u4e0b Channel \u7684\u7ba1\u7406\u8fc7\u7a0b\u3002"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"image-20241217222155609",src:t(47306).A+"",width:"1538",height:"1169"})}),"\n",(0,r.jsx)(n.h2,{id:"seata-\u5982\u4f55\u8bbe\u8ba1\u534f\u8bae",children:"Seata \u5982\u4f55\u8bbe\u8ba1\u534f\u8bae"}),"\n",(0,r.jsx)(n.p,{children:"\u5bf9\u4e8e\u4e00\u4e2a\u7f51\u7edc\u7a0b\u5e8f\u800c\u8a00\uff0c\u901a\u4fe1\u534f\u8bae\u662f\u5fc5\u4e0d\u53ef\u5c11\u7684\uff0cSeata \u4e5f\u4e0d\u4f8b\u5916\uff0c\u8fd9\u91cc\u6211\u4eec\u5c31\u770b\u770b Seata V1 \u7248\u672c\u7684\u534f\u8bae\u662f\u5982\u4f55\u5b9e\u73b0\u7684\u3002"}),"\n",(0,r.jsx)(n.p,{children:"\u4e0e\u4e4b\u76f8\u5173\u7c7b\u4e3b\u8981\u6709 ProtocolEncoderV1\u3001ProtocolDecoderV1\u3002"}),"\n",(0,r.jsx)(n.p,{children:"\u5f53\u7136\uff0c\u6211\u4eec\u524d\u9762\u4e5f\u77e5\u9053 Seata Server \u542f\u52a8\u65f6\u52a0\u5165\u7684\u5904\u7406\u5668\u5176\u5b9e\u662f MultiProtocolDecoder\uff0c\u5728\u8fd9\u4e2a\u7c7b\u7684 decode \u65b9\u6cd5\u4e2d\uff0c\u5982\u4e0b\uff1a"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'protected Object decode(ChannelHandlerContext ctx, ByteBuf in) throws Exception {\n    ByteBuf frame;\n    Object decoded;\n    byte version;\n    try {\n        if (isV0(in)) {\n            decoded = in;\n            version = ProtocolConstants.VERSION_0;\n        } else {\n            decoded = super.decode(ctx, in);\n            version = decideVersion(decoded);\n        }\n        if (decoded instanceof ByteBuf) {\n            frame = (ByteBuf) decoded;\n            // \u901a\u8fc7 MultiProtocolDecoder \u8fdb\u884c\u591a\u7248\u672c\u534f\u8bae\u8bc6\u522b\n            // \u901a\u8fc7 version \u9009\u62e9\u5bf9\u5e94\u7684\u7f16\u89e3\u7801\u5668\n            ProtocolDecoder decoder = protocolDecoderMap.get(version);\n            ProtocolEncoder encoder = protocolEncoderMap.get(version);\n            try {\n                if (decoder == null || encoder == null) {\n                    throw new UnsupportedOperationException("Unsupported version: " + version);\n                }\n                return decoder.decodeFrame(frame);\n            } finally {\n                if (version != ProtocolConstants.VERSION_0) {\n                    frame.release();\n                }\n                // \u5c06\u9009\u5b9a\u7684\u7f16\u89e3\u7801\u5668\u52a0\u5165\u5230 pipeline\uff0c\u5e76\u4e14\u79fb\u9664 MultiProtocolDecoder\n                ctx.pipeline().addLast((ChannelHandler) decoder);\n                ctx.pipeline().addLast((ChannelHandler) encoder);\n                if (channelHandlers != null) {\n                    ctx.pipeline().addLast(channelHandlers);\n                }\n                ctx.pipeline().remove(this);\n            }\n        }\n    } catch (Exception exx) {\n        LOGGER.error("Decode frame error, cause: {}", exx.getMessage());\n        throw new DecodeException(exx);\n    }\n    return decoded;\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"\u6240\u4ee5\uff0c\u8fd9\u91cc\u9009\u62e9\u597d\u4e0e version \u5bf9\u5e94\u7684\u7f16\u89e3\u7801\u5668\uff0c\u7136\u540e\u52a0\u5165\u5230 pipeline \u4e2d\uff0c\u5c31\u4f1a\u5c06 MultiProtocolDecoder \u79fb\u9664\u3002"}),"\n",(0,r.jsx)(n.h3,{id:"v1-\u7248\u672c\u534f\u8bae",children:"V1 \u7248\u672c\u534f\u8bae"}),"\n",(0,r.jsx)(n.p,{children:"Seata \u7684\u534f\u8bae\u8bbe\u8ba1\u662f\u6bd4\u8f83\u5468\u5168\u5e76\u4e14\u901a\u7528\u7684\uff0c\u4e5f\u662f\u4e3b\u6d41\u7684\u89e3\u51b3\u7c98\u5305\u534a\u5305\u95ee\u9898\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u5373\u6d88\u606f\u957f\u5ea6 + \u6d88\u606f\u5185\u5bb9\u3002"}),"\n",(0,r.jsx)(n.p,{children:"\u534f\u8bae\u7684\u683c\u5f0f\u5982\u4e0b\uff1a"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"image-20241217222155609",src:t(83103).A+"",width:"1456",height:"352"})}),"\n",(0,r.jsx)(n.p,{children:"\u53ef\u4ee5\u770b\u5230\uff0c\u5305\u62ec\u9b54\u6570\u3001\u534f\u8bae\u7248\u672c\u53f7\u3001\u957f\u5ea6\u57df\u3001\u5934\u957f\u5ea6\u3001\u62a5\u6587\u7c7b\u578b\u3001\u5e8f\u5217\u5316\u7b97\u6cd5\u3001\u538b\u7f29\u7b97\u6cd5\u3001\u8bf7\u6c42 id\u3001\u53ef\u9009\u7684 map \u6269\u5c55\u4ee5\u53ca\u62a5\u6587\u4f53\u3002"}),"\n",(0,r.jsx)(n.h3,{id:"\u5982\u4f55\u8fdb\u884c\u7f16\u89e3\u7801",children:"\u5982\u4f55\u8fdb\u884c\u7f16\u89e3\u7801"}),"\n",(0,r.jsx)(n.p,{children:"Seata \u89e3\u7801\u5668\u4f7f\u7528\u4e86 Netty \u5185\u7f6e\u7684 LengthFieldBasedFrameDecoder\uff0c\u4e0d\u719f\u6089\u7684\u53ef\u4ee5\u770b\u770b\u3002"}),"\n",(0,r.jsx)(n.p,{children:"\u4e0d\u8fc7\u7f16\u89e3\u7801\u5e76\u4e0d\u96be\uff0c\u6240\u4ee5\u7b80\u5355\u7ed9\u51fa\u4ee3\u7801\uff0c\u4e0d\u8fc7\u591a\u89e3\u91ca\u3002"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'package org.apache.seata.core.rpc.netty.v1;\n\nimport io.netty.buffer.ByteBuf;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.handler.codec.MessageToByteEncoder;\nimport org.apache.seata.core.rpc.netty.ProtocolEncoder;\nimport org.apache.seata.core.serializer.Serializer;\nimport org.apache.seata.core.compressor.Compressor;\nimport org.apache.seata.core.compressor.CompressorFactory;\nimport org.apache.seata.core.protocol.ProtocolConstants;\nimport org.apache.seata.core.protocol.RpcMessage;\nimport org.apache.seata.core.serializer.SerializerServiceLoader;\nimport org.apache.seata.core.serializer.SerializerType;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.Map;\n\n/**\n * <pre>\n * 0     1     2     3     4     5     6     7     8     9    10     11    12    13    14    15    16\n * +-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n * |   magic   |proto|     full length       |    head   | Msg |Seria|Compr|      RequestId        |\n * |   code    |versi|     (head+body)       |   length  |Type |lizer|ess  |                       |\n * +-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+\n * |                                   Head Map [Optional]                                         |\n * +-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+\n * |                                         body                                                  |\n * +-----------------------------------------------------------------------------------------------+\n * </pre>\n * <p>\n * <li>Full Length: include all data </li>\n * <li>Head Length: include head data from magic code to head map. </li>\n * <li>Body Length: Full Length - Head Length</li>\n * </p>\n */\npublic class ProtocolEncoderV1 extends MessageToByteEncoder implements ProtocolEncoder {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(ProtocolEncoderV1.class);\n\n    public void encode(RpcMessage message, ByteBuf out) {\n        try {\n            ProtocolRpcMessageV1 rpcMessage = new ProtocolRpcMessageV1();\n            rpcMessage.rpcMsgToProtocolMsg(message);\n            int fullLength = ProtocolConstants.V1_HEAD_LENGTH;\n            int headLength = ProtocolConstants.V1_HEAD_LENGTH;\n            byte messageType = rpcMessage.getMessageType();\n            out.writeBytes(ProtocolConstants.MAGIC_CODE_BYTES);\n            out.writeByte(ProtocolConstants.VERSION_1);\n            // full Length(4B) and head length(2B) will fix in the end.\n            out.writerIndex(out.writerIndex() + 6); // \u8fd9\u91cc\u8df3\u8fc7 full length \u548c head length \u7684\u4f4d\u7f6e\uff0c\u6700\u540e\u5728\u8865\n            out.writeByte(messageType);\n            out.writeByte(rpcMessage.getCodec());\n            out.writeByte(rpcMessage.getCompressor());\n            out.writeInt(rpcMessage.getId());\n            // direct write head with zero-copy\n            Map<String, String> headMap = rpcMessage.getHeadMap();\n            if (headMap != null && !headMap.isEmpty()) {\n                int headMapBytesLength = HeadMapSerializer.getInstance().encode(headMap, out);\n                headLength += headMapBytesLength;\n                fullLength += headMapBytesLength;\n            }\n            byte[] bodyBytes = null;\n            // heartbeat don\'t have body\n            if (messageType != ProtocolConstants.MSGTYPE_HEARTBEAT_REQUEST && messageType != ProtocolConstants.MSGTYPE_HEARTBEAT_RESPONSE) {\n                Serializer serializer = SerializerServiceLoader.load(SerializerType.getByCode(rpcMessage.getCodec()), ProtocolConstants.VERSION_1);\n                bodyBytes = serializer.serialize(rpcMessage.getBody());\n                Compressor compressor = CompressorFactory.getCompressor(rpcMessage.getCompressor());\n                bodyBytes = compressor.compress(bodyBytes);\n                fullLength += bodyBytes.length;\n            }\n            if (bodyBytes != null) {\n                out.writeBytes(bodyBytes);\n            }\n            // fix fullLength and headLength\n            int writeIndex = out.writerIndex();\n            // skip magic code(2B) + version(1B)\n            out.writerIndex(writeIndex - fullLength + 3);\n            out.writeInt(fullLength);\n            out.writeShort(headLength);\n            out.writerIndex(writeIndex);\n        } catch (Throwable e) {\n            LOGGER.error("Encode request error!", e);\n            throw e;\n        }\n    }\n\n    @Override\n    protected void encode(ChannelHandlerContext ctx, Object msg, ByteBuf out) throws Exception {\n        try {\n            if (msg instanceof RpcMessage) {\n                this.encode((RpcMessage) msg, out);\n            } else {\n                throw new UnsupportedOperationException("Not support this class:" + msg.getClass());\n            }\n        } catch (Throwable e) {\n            LOGGER.error("Encode request error!", e);\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'package org.apache.seata.core.rpc.netty.v1;\n\nimport java.util.List;\nimport java.util.Map;\n\nimport io.netty.buffer.ByteBuf;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.handler.codec.LengthFieldBasedFrameDecoder;\nimport org.apache.seata.core.compressor.Compressor;\nimport org.apache.seata.core.compressor.CompressorFactory;\nimport org.apache.seata.core.exception.DecodeException;\nimport org.apache.seata.core.protocol.HeartbeatMessage;\nimport org.apache.seata.core.protocol.ProtocolConstants;\nimport org.apache.seata.core.protocol.RpcMessage;\nimport org.apache.seata.core.rpc.netty.ProtocolDecoder;\nimport org.apache.seata.core.serializer.Serializer;\nimport org.apache.seata.core.serializer.SerializerServiceLoader;\nimport org.apache.seata.core.serializer.SerializerType;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * <pre>\n * 0     1     2     3     4     5     6     7     8     9    10     11    12    13    14    15    16\n * +-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n * |   magic   |proto|     full length       |    head   | Msg |Seria|Compr|      RequestId        |\n * |   code    |versi|     (head+body)       |   length  |Type |lizer|ess  |                       |\n * +-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+\n * |                                   Head Map [Optional]                                         |\n * +-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+\n * |                                         body                                                  |\n * +-----------------------------------------------------------------------------------------------+\n * </pre>\n * <p>\n * <li>Full Length: include all data </li>\n * <li>Head Length: include head data from magic code to head map. </li>\n * <li>Body Length: Full Length - Head Length</li>\n * </p>\n */\npublic class ProtocolDecoderV1 extends LengthFieldBasedFrameDecoder implements ProtocolDecoder {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(ProtocolDecoderV1.class);\n\n    private final List<SerializerType> supportDeSerializerTypes;\n\n    public ProtocolDecoderV1() {\n        /**\n         *  int maxFrameLength,\n         *  int lengthFieldOffset,  \u9b54\u672f 2B\u3001\u7248\u672c\u53f7 1B \u6240\u4ee5\u957f\u5ea6\u504f\u79fb 3B\n         *  int lengthFieldLength,  FullLength is int(4B). so values is 4\n         *  int lengthAdjustment,   FullLength include all data and read 7 bytes before, so the left length is (FullLength-7). so values is -7\n         *  int initialBytesToStrip we will check magic code and version self, so do not strip any bytes. so values is 0\n         */\n        super(ProtocolConstants.MAX_FRAME_LENGTH, 3, 4, -7, 0);\n        supportDeSerializerTypes = SerializerServiceLoader.getSupportedSerializers();\n        if (supportDeSerializerTypes.isEmpty()) {\n            throw new IllegalArgumentException("No serializer found");\n        }\n    }\n\n    @Override\n    public RpcMessage decodeFrame(ByteBuf frame) {\n        byte b0 = frame.readByte();\n        byte b1 = frame.readByte();\n        if (ProtocolConstants.MAGIC_CODE_BYTES[0] != b0 || ProtocolConstants.MAGIC_CODE_BYTES[1] != b1) {\n            throw new IllegalArgumentException("Unknown magic code: " + b0 + ", " + b1);\n        }\n        byte version = frame.readByte();\n        int fullLength = frame.readInt();\n        short headLength = frame.readShort();\n        byte messageType = frame.readByte();\n        byte codecType = frame.readByte();\n        byte compressorType = frame.readByte();\n        int requestId = frame.readInt();\n        ProtocolRpcMessageV1 rpcMessage = new ProtocolRpcMessageV1();\n        rpcMessage.setCodec(codecType);\n        rpcMessage.setId(requestId);\n        rpcMessage.setCompressor(compressorType);\n        rpcMessage.setMessageType(messageType);\n        // direct read head with zero-copy\n        int headMapLength = headLength - ProtocolConstants.V1_HEAD_LENGTH;\n        if (headMapLength > 0) {\n            Map<String, String> map = HeadMapSerializer.getInstance().decode(frame, headMapLength);\n            rpcMessage.getHeadMap().putAll(map);\n        }\n        // read body\n        if (messageType == ProtocolConstants.MSGTYPE_HEARTBEAT_REQUEST) {\n            rpcMessage.setBody(HeartbeatMessage.PING);\n        } else if (messageType == ProtocolConstants.MSGTYPE_HEARTBEAT_RESPONSE) {\n            rpcMessage.setBody(HeartbeatMessage.PONG);\n        } else {\n            int bodyLength = fullLength - headLength;\n            if (bodyLength > 0) {\n                byte[] bs = new byte[bodyLength];\n                frame.readBytes(bs);\n                Compressor compressor = CompressorFactory.getCompressor(compressorType);\n                bs = compressor.decompress(bs);\n                SerializerType protocolType = SerializerType.getByCode(rpcMessage.getCodec());\n                if (this.supportDeSerializerTypes.contains(protocolType)) {\n                    Serializer serializer = SerializerServiceLoader.load(protocolType, ProtocolConstants.VERSION_1);\n                    rpcMessage.setBody(serializer.deserialize(bs));\n                } else {\n                    throw new IllegalArgumentException("SerializerType not match");\n                }\n            }\n        }\n        return rpcMessage.protocolMsgToRpcMsg();\n    }\n\n    @Override\n    protected Object decode(ChannelHandlerContext ctx, ByteBuf in) throws Exception {\n        Object decoded;\n        try {\n            decoded = super.decode(ctx, in);\n            if (decoded instanceof ByteBuf) {\n                ByteBuf frame = (ByteBuf) decoded;\n                try {\n                    return decodeFrame(frame);\n                } finally {\n                    frame.release();\n                }\n            }\n        } catch (Exception exx) {\n            LOGGER.error("Decode frame error, cause: {}", exx.getMessage());\n            throw new DecodeException(exx);\n        }\n        return decoded;\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"\u603b\u7ed3",children:"\u603b\u7ed3"}),"\n",(0,r.jsx)(n.p,{children:"\u5c31\u76ee\u524d\u770b\u6765\uff0cSeata \u7684\u7f51\u7edc\u901a\u4fe1\u5b9e\u73b0\u7684\u662f\u6bd4\u8f83\u5bb9\u6613\u770b\u61c2\u7684\uff0c\u4e0d\u8fc7\uff0c\u8fd9\u7bc7\u6587\u7ae0\u7684\u5206\u6790\u4e5f\u4ec5\u4ec5\u53ea\u662f\u6d6e\u4e8e\u8868\u9762\uff0c\u5bf9\u6df1\u5c42\u6b21\u7684\u66f4\u52a0\u91cd\u8981\u7684\u4ee3\u7801\u5065\u58ee\u6027\u3001\u5f02\u5e38\u5904\u7406\u3001\u4f18\u96c5\u5173\u95ed\u7b49\u95ee\u9898\u90fd\u6ca1\u6709\u804a\u5230\uff0c\u770b\u540e\u9762\u6709\u65b0\u7684\u7406\u89e3\u518d\u5206\u6790\u5206\u6790\u3002"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://blog.hein-hp.click/article/5p94ivva/",children:"\u539f\u6587\u94fe\u63a5"})})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},98021:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/class-level-bd045d7bbafdae4554e51cffd11eace6.png"},47306:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/seata-channel-2a36363196c8c68f8f9c058bbec413dc.png"},83103:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/seata-protocol-5dc6fcbb74383edf784c3faa54236e74.png"},49746:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/seata-rpc-1edb5b9dd8fc46db8e8f153a5dda3699.png"},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>i});var r=t(96540);const s={},a=r.createContext(s);function o(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);