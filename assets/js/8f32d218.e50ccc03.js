"use strict";(self.webpackChunkseata_website=self.webpackChunkseata_website||[]).push([[44071],{94351:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>l});var a=t(74848),o=t(28453);const r={title:"Go Language Client Communication with Seata Server",author:"Wang Mingjun, Seata Open Source Summer Student Participant",description:"This article takes Go language as an example to demonstrate Seata's multi-language client communication capabilities.",date:"2024/11/30",keywords:["seata","distributed transaction","cloud-native","grpc","multi-language communication"]},i="Background",s={permalink:"/blog/seata-grpc-client",editUrl:"https://github.com/apache/incubator-seata-website/blob/docusaurus/i18n/en/docusaurus-plugin-content-blog/seata-grpc-client.md",source:"@site/i18n/en/docusaurus-plugin-content-blog/seata-grpc-client.md",title:"Go Language Client Communication with Seata Server",description:"This article takes Go language as an example to demonstrate Seata's multi-language client communication capabilities.",date:"2024-11-30T00:00:00.000Z",formattedDate:"November 30, 2024",tags:[],readingTime:3.775,hasTruncateMarker:!1,authors:[{name:"Wang Mingjun, Seata Open Source Summer Student Participant"}],frontMatter:{title:"Go Language Client Communication with Seata Server",author:"Wang Mingjun, Seata Open Source Summer Student Participant",description:"This article takes Go language as an example to demonstrate Seata's multi-language client communication capabilities.",date:"2024/11/30",keywords:["seata","distributed transaction","cloud-native","grpc","multi-language communication"]},unlisted:!1,prevItem:{title:"seata-namingserver",permalink:"/blog/seata-namingserver"},nextItem:{title:"Seata Raft Configuration Center",permalink:"/blog/seata-raft-config-center"}},c={authorsImageUrls:[void 0]},l=[{value:"Deploy and Start Seata Server",id:"deploy-and-start-seata-server",level:2},{value:"Proto File Import",id:"proto-file-import",level:2},{value:"Grpc File Generation",id:"grpc-file-generation",level:2},{value:"Grpc Invocation",id:"grpc-invocation",level:2},{value:"Proto Design",id:"proto-design",level:2},{value:"Grpc Protocol Recognition",id:"grpc-protocol-recognition",level:2},{value:"Grpc Request Sending and Processing",id:"grpc-request-sending-and-processing",level:2},{value:"Grpc Connection Establishment and Management",id:"grpc-connection-establishment-and-management",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",img:"img",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.p,{children:["With the merge of PR ",(0,a.jsx)(n.a,{href:"https://github.com/apache/incubator-seata/pull/6754",children:"https://github.com/apache/incubator-seata/pull/6754"}),", Seata Server is now capable of recognizing and processing Grpc requests. This means that any language client, by simply including the proto files, can communicate with the Seata Server deployed on the JVM, thereby achieving the full process of distributed transactions."]}),"\n",(0,a.jsx)(n.p,{children:"Below is a demonstration of this process using Go language as an example."}),"\n",(0,a.jsx)(n.h1,{id:"environment-preparation",children:"Environment Preparation"}),"\n",(0,a.jsx)(n.p,{children:"Goland 2024.2"}),"\n",(0,a.jsx)(n.p,{children:"Idea 2024.3"}),"\n",(0,a.jsx)(n.p,{children:"JDK 1.8"}),"\n",(0,a.jsx)(n.p,{children:"Go 1.23.3"}),"\n",(0,a.jsx)(n.p,{children:"Seata 2.3.0-SNAPSHOT"}),"\n",(0,a.jsx)(n.p,{children:"libprotoc 3.21.0"}),"\n",(0,a.jsx)(n.h1,{id:"operation-process",children:"Operation Process"}),"\n",(0,a.jsx)(n.h2,{id:"deploy-and-start-seata-server",children:"Deploy and Start Seata Server"}),"\n",(0,a.jsx)(n.p,{children:"Run org.apache.seata.server.ServerApplication#main as shown below:"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"2024121301.png",src:t(29630).A+"",width:"2560",height:"1504"})}),"\n",(0,a.jsx)(n.h2,{id:"proto-file-import",children:"Proto File Import"}),"\n",(0,a.jsx)(n.p,{children:"Import the necessary proto files for the transaction process in the Go project, including various transaction request and response proto files and the proto files for initiating RPC. As shown below:"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"2024121302.png",src:t(15381).A+"",width:"2560",height:"1504"})}),"\n",(0,a.jsx)(n.h2,{id:"grpc-file-generation",children:"Grpc File Generation"}),"\n",(0,a.jsx)(n.p,{children:"In the directory where the proto files were imported in the previous step, execute the command:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-shell",children:"protoc --go_out=. --go-grpc_out=. .\\*.proto\n"})}),"\n",(0,a.jsx)(n.p,{children:"After execution, the grpc code will be generated as shown below:"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"2024121303.png",src:t(32492).A+"",width:"2560",height:"1504"})}),"\n",(0,a.jsx)(n.h2,{id:"grpc-invocation",children:"Grpc Invocation"}),"\n",(0,a.jsx)(n.p,{children:"Complete a distributed transaction process in main.go and print the response from Seata Server. The code is as follows:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'func main() {\n    conn, err := grpc.Dial(":8091", grpc.WithInsecure())\n    if err != nil {\n        log.Fatalf("did not connect: %v", err)\n    }\n    defer conn.Close()\n    client := pb.NewSeataServiceClient(conn)\n    stream, err := client.SendRequest(context.Background())\n    if err != nil {\n        log.Fatalf("could not sendRequest: %v", err)\n    }\n    defer stream.CloseSend()\n\n    sendRegisterTm(stream)\n    xid := sendGlobalBegin(stream)\n    sendBranchRegister(stream, xid)\n    sendGlobalCommit(stream, xid)\n}\n\n// ... Other functions ...\n\n'})}),"\n",(0,a.jsx)(n.p,{children:"After running, the Seata Server console prints as follows:"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"2024121304.png",src:t(62659).A+"",width:"2560",height:"1504"})}),"\n",(0,a.jsx)(n.p,{children:"The Go client console prints as follows:"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"2024121305.png",src:t(41082).A+"",width:"2560",height:"1504"})}),"\n",(0,a.jsx)(n.h1,{id:"implementation-principle",children:"Implementation Principle"}),"\n",(0,a.jsx)(n.h2,{id:"proto-design",children:"Proto Design"}),"\n",(0,a.jsx)(n.p,{children:"To achieve communication with multi-language grpc clients, Seata Server defines grpcMessage.proto, which defines the GrpcMessageProto that assembles various Seata Message objects and the bidirectional stream interface sendRequest for assembling Seata communication requests. Seata Server uses grpcMessage.proto as a medium to achieve communication with multi-language clients."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-proto",children:'syntax = "proto3";\npackage org.apache.seata.protocol.protobuf;\nimport "google/protobuf/any.proto";\noption java_multiple_files = true;\noption java_outer_classname = "GrpcMessage";\noption java_package = "org.apache.seata.core.protocol.generated";\n\nmessage GrpcMessageProto {\n    int32 id = 1;\n    int32 messageType = 2;\n    map<string, string> headMap = 3;\n    google.protobuf.Any body = 4;\n}\n\nservice SeataService {\n    rpc sendRequest (stream GrpcMessageProto) returns (stream GrpcMessageProto);\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"In addition, GrpcSerializer is defined, adapting to Seata's serialization SPI system, which is used to achieve the mutual conversion of protobuf byte streams and Seata message objects."}),"\n",(0,a.jsx)(n.h2,{id:"grpc-protocol-recognition",children:"Grpc Protocol Recognition"}),"\n",(0,a.jsx)(n.p,{children:"Seata Server implements ProtocolDetectHandler and ProtocolDetector. ProtocolDetectHandler, as a ByteToMessageDecoder, will traverse the ProtocolDetector list when receiving a message to find a ProtocolDetector that can recognize the current message. ProtocolDetector distinguishes Seata protocols, Http1.1 protocols, and Http2 protocols through recognizing magic numbers. Once recognized, the ChannelHandler capable of handling the protocol is added to the current Channel's Pipeline."}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"2024121306.jpeg",src:t(27150).A+"",width:"1904",height:"1657"})}),"\n",(0,a.jsx)(n.h2,{id:"grpc-request-sending-and-processing",children:"Grpc Request Sending and Processing"}),"\n",(0,a.jsx)(n.p,{children:"Seata Server implements GrpcEncoder and GrpcDecoder. GrpcEncoder is responsible for converting Seata's RpcMessage into GrpcMessageProto recognizable by grpc native clients, filling the header with status, contentType, and other protocol headers for communication with grpc native clients. GrpcEncoder also adapts to grpc protocol specifications, writing the compression bit, length, and message body in the order specified by the grpc protocol into the channel."}),"\n",(0,a.jsx)(n.p,{children:"GrpcDecoder is responsible for processing requests from grpc native clients. Since grpc clients implement request batching in the underlying transmission through a queue flush, GrpcDecoder is also responsible for unpacking a batch of requests. Finally, GrpcDecoder converts the protobuf byte stream into one or more RpcMessages and passes them to the Seata request processor."}),"\n",(0,a.jsx)(n.h2,{id:"grpc-connection-establishment-and-management",children:"Grpc Connection Establishment and Management"}),"\n",(0,a.jsx)(n.p,{children:"On the server side, simply configure a ProtocolDetectHandler to complete the recognition and establishment of various types of connections."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"@Override\npublic void initChannel(SocketChannel ch) {\n    ProtocolDetector[] defaultProtocolDetectors = {\n            new Http2Detector(getChannelHandlers()),\n            new SeataDetector(getChannelHandlers()),\n            new HttpDetector()\n    };\n    ch.pipeline().addLast(new IdleStateHandler(nettyServerConfig.getChannelMaxReadIdleSeconds(), 0, 0))\n            .addLast(new ProtocolDetectHandler(defaultProtocolDetectors));\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"On the client side, when obtaining a Channel, if the current communication method is Grpc, an Http2MultiStreamChannel is obtained as the parent Channel, and grpc-related handlers are added to this Channel."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"if (nettyClientConfig.getProtocol().equals(Protocol.GPRC.value)) {\n    Http2StreamChannelBootstrap bootstrap = new Http2StreamChannelBootstrap(channel);\n    bootstrap.handler(new ChannelInboundHandlerAdapter() {\n        @Override\n        public void handlerAdded(ChannelHandlerContext ctx) throws Exception {\n            Channel channel = ctx.channel();\n            channel.pipeline().addLast(new GrpcDecoder());\n            channel.pipeline().addLast(new GrpcEncoder());\n            if (channelHandlers != null) {\n                addChannelPipelineLast(channel, channelHandlers);\n            }\n        }\n    });\n    channel = bootstrap.open().get();\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"Please note that due to network issues, the parsing of the above links was unsuccessful. If you need the content of the parsed web pages, please check the legality of the web page links and try again. If you do not need the parsing of these links, the question can be answered normally."})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},29630:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/2024121301-4613ead894d7510e65d88296eb86e297.png"},15381:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/2024121302-39625f525d6da1bbc7ad4509c94718eb.png"},32492:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/2024121303-bad6bb1db830335d72e2037ea7dbf4de.png"},62659:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/2024121304-fcc9119043d66143a841d2008ef136f5.png"},41082:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/2024121305-327ecb450c5fd7f7fc636165421972b2.png"},27150:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/2024121306-5568d956a86d67c43e4d76837dd5c8b8.jpeg"},28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>s});var a=t(96540);const o={},r=a.createContext(o);function i(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);